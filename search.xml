<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Excel下拉框限制</title>
    <url>/posts/56053/</url>
    <content><![CDATA[<h1 id="使用easypoi导出"><a href="#使用easypoi导出" class="headerlink" title="使用easypoi导出"></a>使用easypoi导出</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExportParams</span> <span class="variable">exportParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExportParams</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;sheetName&quot;</span>, ExcelType.XSSF);</span><br><span class="line">exportParams.setCreateHeadRows(<span class="literal">true</span>);</span><br><span class="line">String[] strings = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;小明&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">firstCol</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">lastCol</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> ExcelExportUtil.exportExcel(exportParams, User.class, list);</span><br><span class="line"></span><br><span class="line">selectList(workbook, <span class="number">2</span>, <span class="number">65535</span>, <span class="number">3</span>, <span class="number">3</span>, strings, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">EasyExcelUtils.downLoadExcel(<span class="string">&quot;测试数据&quot;</span>, response, workbook);</span><br></pre></td></tr></table></figure>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a><strong>工具类</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstRow    开始行号(下标0开始)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lastRow     结束行号，最大65535</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstCol    区域中第一个单元格的列号 (下标0开始)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lastCol     区域中最后一个单元格的列号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataArray   下拉内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sheetHidden 影藏的sheet编号（例如1,2,3），多个下拉数据不能使用同一个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &lt;a href=&quot;http://poi.apache.org/components/spreadsheet/quick-guide.html#Validation&quot;&gt; POI官网&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectList</span><span class="params">(Workbook workbook, <span class="type">int</span> firstRow, <span class="type">int</span> lastRow, <span class="type">int</span> firstCol, <span class="type">int</span> lastCol, String[] dataArray, <span class="type">int</span> sheetHidden)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个隐藏的sheet,用来存放下拉框数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hiddenName</span> <span class="operator">=</span> <span class="string">&quot;hidden_&quot;</span> + (<span class="type">int</span>) ((Math.random() * <span class="number">9</span> + <span class="number">1</span>) * <span class="number">100</span>);</span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">hidden</span> <span class="operator">=</span> workbook.createSheet(hiddenName);</span><br><span class="line">    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, length = dataArray.length; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dataArray[i];</span><br><span class="line">        <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> hidden.createRow(i);</span><br><span class="line">        cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">        cell.setCellValue(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Name</span> <span class="variable">namedCell</span> <span class="operator">=</span> workbook.createName();</span><br><span class="line">    namedCell.setNameName(hiddenName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Excel下拉框引用公式</span></span><br><span class="line">    namedCell.setRefersToFormula(hiddenName + <span class="string">&quot;!$A$1:$A$&quot;</span> + dataArray.length);</span><br><span class="line">    <span class="comment">//加载数据,将名称为hidden的</span></span><br><span class="line">    <span class="type">DVConstraint</span> <span class="variable">constraint</span> <span class="operator">=</span> DVConstraint.createFormulaListConstraint(hiddenName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  导出XLS</span></span><br><span class="line">    <span class="comment">// 设置数据有效性加载在哪个单元格上,四个参数分别是：起始行、终止行、起始列、终止列</span></span><br><span class="line">    <span class="type">CellRangeAddressList</span> <span class="variable">addressList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddressList</span>(firstRow, lastRow, firstCol, lastCol);</span><br><span class="line">    <span class="type">HSSFDataValidation</span> <span class="variable">validation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFDataValidation</span>(addressList, constraint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// XLSX</span></span><br><span class="line">    <span class="type">XSSFDataValidationHelper</span> <span class="variable">dvHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFDataValidationHelper</span>((XSSFSheet) sheet);</span><br><span class="line">    <span class="type">DataValidationConstraint</span> <span class="variable">dvConstraint</span> <span class="operator">=</span> dvHelper.createFormulaListConstraint(hiddenName);</span><br><span class="line">    dvConstraint.setOperator(<span class="number">0</span>);</span><br><span class="line">    <span class="type">CellRangeAddressList</span> <span class="variable">xssfAddressList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddressList</span>(firstRow, lastRow, firstCol, lastCol);</span><br><span class="line">    <span class="type">XSSFDataValidation</span> <span class="variable">xssfDataValidation</span> <span class="operator">=</span> (XSSFDataValidation) dvHelper.createValidation(</span><br><span class="line">            dvConstraint, xssfAddressList);</span><br><span class="line">    <span class="comment">// 是否显示错误提示框(XSSFDataValidation默认为false,HSSFDataValidation默认为true)</span></span><br><span class="line">    xssfDataValidation.setShowErrorBox(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 错误提示框的提示内容</span></span><br><span class="line">    xssfDataValidation.createErrorBox(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line">    <span class="comment">// 将sheet设置为隐藏</span></span><br><span class="line">    workbook.setSheetHidden(sheetHidden, <span class="literal">true</span>);</span><br><span class="line">    sheet.addValidationData(xssfDataValidation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="导出工具类"><a href="#导出工具类" class="headerlink" title="导出工具类"></a><strong>导出工具类</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workbook excel数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downLoadExcel</span><span class="params">(String fileName, HttpServletResponse response, Workbook workbook)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.reset();</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;ISO8859-1&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadFileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(fileName.getBytes(), <span class="string">&quot;ISO8859-1&quot;</span>) + <span class="string">&quot;.&quot;</span> + ExcelTypeEnum.XLSX.getValue();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + downloadFileName);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Pargam&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        workbook.write(response.getOutputStream());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>excel下拉框</tag>
        <tag>excel</tag>
        <tag>导出</tag>
      </tags>
  </entry>
  <entry>
    <title>MVCC多版本并发控制</title>
    <url>/posts/39578/</url>
    <content><![CDATA[<h1 id="MVCC多版本并发控制"><a href="#MVCC多版本并发控制" class="headerlink" title="MVCC多版本并发控制"></a>MVCC多版本并发控制</h1><h2 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h2><h2 id="DB-TRX-ID"><a href="#DB-TRX-ID" class="headerlink" title="DB_TRX_ID"></a>DB_TRX_ID</h2><p>最近修的事务id,记录创建这条记录或最新一次记录的事务id</p>
<h2 id="DB-ROLL-PTR（存储的是内存地址）"><a href="#DB-ROLL-PTR（存储的是内存地址）" class="headerlink" title="DB_ROLL_PTR（存储的是内存地址）"></a>DB_ROLL_PTR（存储的是内存地址）</h2><p>回滚指针，指向这条记录的上个版本，用于配合undolog,回滚到上一个版本</p>
<h2 id="DB-ROW-ID"><a href="#DB-ROW-ID" class="headerlink" title="DB_ROW_ID"></a>DB_ROW_ID</h2><p>隐藏的主键，如果没有主键则innodb会自动创建一个tow_id</p>
<h1 id="ReadView-快照读-才会使用mvcc"><a href="#ReadView-快照读-才会使用mvcc" class="headerlink" title="ReadView(快照读)才会使用mvcc"></a>ReadView(快照读)才会使用mvcc</h1><p>最普通不加锁的select查询</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>m_ids：当前活跃的事务编号集合<br>min_trx_id：最小的活跃事务编号<br>max_trx_id：最大的活跃事务编号<br>creator_trx_id：readview创建者的事务编号</p>
<h2 id="RC-读已提交-：每次查询会生成新的ReadView"><a href="#RC-读已提交-：每次查询会生成新的ReadView" class="headerlink" title="RC(读已提交)：每次查询会生成新的ReadView"></a>RC(读已提交)：每次查询会生成新的ReadView</h2><h2 id="01-png"><a href="#01-png" class="headerlink" title="01.png)"></a>01.png)</h2><h2 id="02-png"><a href="#02-png" class="headerlink" title="02.png)"></a><img src="/posts/39578/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-RC(%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4)02.png" class="MVCC多版本并发控制-RC(读已提交">02.png)</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="RR-可重复读-仅在第一个查询时候创建ReadView，后续快照读复用"><a href="#RR-可重复读-仅在第一个查询时候创建ReadView，后续快照读复用" class="headerlink" title="RR(可重复读)仅在第一个查询时候创建ReadView，后续快照读复用"></a>RR(可重复读)仅在第一个查询时候创建ReadView，后续快照读复用</h2><p>两次快照读之前存在当前读，在会重新生成ReadView，会导致幻读</p>
<h1 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h1><p>加锁的select查询</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令清单</title>
    <url>/posts/56897/</url>
    <content><![CDATA[<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。<br>Workspace：工作区<br>Index &#x2F; Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>
<h1 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h1><h2 id="在当前目录新建一个Git代码库"><a href="#在当前目录新建一个Git代码库" class="headerlink" title="在当前目录新建一个Git代码库"></a>在当前目录新建一个Git代码库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="新建一个目录，将其初始化为Git代码库"><a href="#新建一个目录，将其初始化为Git代码库" class="headerlink" title="新建一个目录，将其初始化为Git代码库"></a>新建一个目录，将其初始化为Git代码库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init [project-name]</span><br></pre></td></tr></table></figure>
<h2 id="下载一个项目和它的整个代码历史"><a href="#下载一个项目和它的整个代码历史" class="headerlink" title="下载一个项目和它的整个代码历史"></a>下载一个项目和它的整个代码历史</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<h2 id="显示当前的Git配置"><a href="#显示当前的Git配置" class="headerlink" title="显示当前的Git配置"></a>显示当前的Git配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<h2 id="编辑Git配置文件"><a href="#编辑Git配置文件" class="headerlink" title="编辑Git配置文件"></a>编辑Git配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -e [--global]</span><br></pre></td></tr></table></figure>
<h2 id="设置提交代码时的用户信息"><a href="#设置提交代码时的用户信息" class="headerlink" title="设置提交代码时的用户信息"></a>设置提交代码时的用户信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config [--global] user.name &quot;[name]&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>
<h1 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h1><h2 id="添加指定文件到暂存区"><a href="#添加指定文件到暂存区" class="headerlink" title="添加指定文件到暂存区"></a>添加指定文件到暂存区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h2 id="添加指定目录到暂存区，包括子目录"><a href="#添加指定目录到暂存区，包括子目录" class="headerlink" title="添加指定目录到暂存区，包括子目录"></a>添加指定目录到暂存区，包括子目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>
<h2 id="添加当前目录的所有文件到暂存区"><a href="#添加当前目录的所有文件到暂存区" class="headerlink" title="添加当前目录的所有文件到暂存区"></a>添加当前目录的所有文件到暂存区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h2 id="添加每个变化前，都会要求确认"><a href="#添加每个变化前，都会要求确认" class="headerlink" title="添加每个变化前，都会要求确认"></a>添加每个变化前，都会要求确认</h2><h2 id="对于同一个文件的多处变化，可以实现分次提交"><a href="#对于同一个文件的多处变化，可以实现分次提交" class="headerlink" title="对于同一个文件的多处变化，可以实现分次提交"></a>对于同一个文件的多处变化，可以实现分次提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -p</span><br></pre></td></tr></table></figure>
<h2 id="删除工作区文件，并且将这次删除放入暂存区"><a href="#删除工作区文件，并且将这次删除放入暂存区" class="headerlink" title="删除工作区文件，并且将这次删除放入暂存区"></a>删除工作区文件，并且将这次删除放入暂存区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h2 id="停止追踪指定文件，但该文件会保留在工作区"><a href="#停止追踪指定文件，但该文件会保留在工作区" class="headerlink" title="停止追踪指定文件，但该文件会保留在工作区"></a>停止追踪指定文件，但该文件会保留在工作区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached [file]</span><br></pre></td></tr></table></figure>
<h2 id="改名文件，并且将这个改名放入暂存区"><a href="#改名文件，并且将这个改名放入暂存区" class="headerlink" title="改名文件，并且将这个改名放入暂存区"></a>改名文件，并且将这个改名放入暂存区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><h2 id="提交暂存区到仓库区"><a href="#提交暂存区到仓库区" class="headerlink" title="提交暂存区到仓库区"></a>提交暂存区到仓库区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure>
<h2 id="提交暂存区的指定文件到仓库区"><a href="#提交暂存区的指定文件到仓库区" class="headerlink" title="提交暂存区的指定文件到仓库区"></a>提交暂存区的指定文件到仓库区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>
<h2 id="提交工作区自上次commit之后的变化，直接到仓库区"><a href="#提交工作区自上次commit之后的变化，直接到仓库区" class="headerlink" title="提交工作区自上次commit之后的变化，直接到仓库区"></a>提交工作区自上次commit之后的变化，直接到仓库区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>
<h2 id="提交时显示所有diff信息"><a href="#提交时显示所有diff信息" class="headerlink" title="提交时显示所有diff信息"></a>提交时显示所有diff信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -v</span><br></pre></td></tr></table></figure>
<h2 id="使用一次新的commit，替代上一次提交"><a href="#使用一次新的commit，替代上一次提交" class="headerlink" title="使用一次新的commit，替代上一次提交"></a>使用一次新的commit，替代上一次提交</h2><h2 id="如果代码没有任何新变化，则用来改写上一次commit的提交信息"><a href="#如果代码没有任何新变化，则用来改写上一次commit的提交信息" class="headerlink" title="如果代码没有任何新变化，则用来改写上一次commit的提交信息"></a>如果代码没有任何新变化，则用来改写上一次commit的提交信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend -m [message]</span><br></pre></td></tr></table></figure>
<h2 id="重做上一次commit，并包括指定文件的新变化"><a href="#重做上一次commit，并包括指定文件的新变化" class="headerlink" title="重做上一次commit，并包括指定文件的新变化"></a>重做上一次commit，并包括指定文件的新变化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="列出所有本地分支"><a href="#列出所有本地分支" class="headerlink" title="列出所有本地分支"></a>列出所有本地分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<h2 id="列出所有本地分支和远程分支"><a href="#列出所有本地分支和远程分支" class="headerlink" title="列出所有本地分支和远程分支"></a>列出所有本地分支和远程分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<h2 id="新建一个分支，但依然停留在当前分支"><a href="#新建一个分支，但依然停留在当前分支" class="headerlink" title="新建一个分支，但依然停留在当前分支"></a>新建一个分支，但依然停留在当前分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure>
<h2 id="新建一个分支，并切换到该分支"><a href="#新建一个分支，并切换到该分支" class="headerlink" title="新建一个分支，并切换到该分支"></a>新建一个分支，并切换到该分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch]</span><br></pre></td></tr></table></figure>
<h2 id="新建一个分支，指向指定commit"><a href="#新建一个分支，指向指定commit" class="headerlink" title="新建一个分支，指向指定commit"></a>新建一个分支，指向指定commit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch] [commit]</span><br></pre></td></tr></table></figure>
<h2 id="新建一个分支，与指定的远程分支建立追踪关系"><a href="#新建一个分支，与指定的远程分支建立追踪关系" class="headerlink" title="新建一个分支，与指定的远程分支建立追踪关系"></a>新建一个分支，与指定的远程分支建立追踪关系</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure>
<h2 id="切换到指定分支，并更新工作区"><a href="#切换到指定分支，并更新工作区" class="headerlink" title="切换到指定分支，并更新工作区"></a>切换到指定分支，并更新工作区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure>
<h2 id="切换到上一个分支"><a href="#切换到上一个分支" class="headerlink" title="切换到上一个分支"></a>切换到上一个分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>
<h2 id="建立追踪关系，在现有分支与指定的远程分支之间"><a href="#建立追踪关系，在现有分支与指定的远程分支之间" class="headerlink" title="建立追踪关系，在现有分支与指定的远程分支之间"></a>建立追踪关系，在现有分支与指定的远程分支之间</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure>
<h2 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure>
<h2 id="选择一个commit，合并进当前分支"><a href="#选择一个commit，合并进当前分支" class="headerlink" title="选择一个commit，合并进当前分支"></a>选择一个commit，合并进当前分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line">## 删除分支</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git branch -d [branch-name]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 删除远程分支</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git push origin –delete [branch-name]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="列出所有tag"><a href="#列出所有tag" class="headerlink" title="列出所有tag"></a>列出所有tag</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<h2 id="新建一个tag在当前commit"><a href="#新建一个tag在当前commit" class="headerlink" title="新建一个tag在当前commit"></a>新建一个tag在当前commit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> git tag [tag]</span><br><span class="line"></span><br><span class="line">## 新建一个tag在指定commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git tag [tag] [commit]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 删除本地tag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git tag -d [tag]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 删除远程tag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git push origin :refs&#x2F;tags&#x2F;[tagName]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 查看tag信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git show [tag]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 提交指定tag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git push [remote] [tag]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 提交所有tag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git push [remote] –tags</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 新建一个分支，指向某个tag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git checkout -b [branch] [tag]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看信息</span><br><span class="line"></span><br><span class="line">## 显示有变更的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git status</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 显示当前分支的版本历史</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git log –stat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 搜索提交历史，根据关键词</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git log -S [keyword]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git log [tag] HEAD –pretty&#x3D;format:%s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git log [tag] HEAD –grep feature</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 显示某个文件的版本历史，包括文件改名</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> git log –follow [file]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"> git whatchanged [file]</span><br></pre></td></tr></table></figure>
<h2 id="显示指定文件相关的每一次diff"><a href="#显示指定文件相关的每一次diff" class="headerlink" title="显示指定文件相关的每一次diff"></a>显示指定文件相关的每一次diff</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p [file]</span><br></pre></td></tr></table></figure>
<h2 id="显示过去5次提交"><a href="#显示过去5次提交" class="headerlink" title="显示过去5次提交"></a>显示过去5次提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -5 --pretty --oneline</span><br></pre></td></tr></table></figure>
<h2 id="显示所有提交过的用户，按提交次数排序"><a href="#显示所有提交过的用户，按提交次数排序" class="headerlink" title="显示所有提交过的用户，按提交次数排序"></a>显示所有提交过的用户，按提交次数排序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git shortlog -sn</span><br></pre></td></tr></table></figure>
<h2 id="显示指定文件是什么人在什么时间修改过"><a href="#显示指定文件是什么人在什么时间修改过" class="headerlink" title="显示指定文件是什么人在什么时间修改过"></a>显示指定文件是什么人在什么时间修改过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame [file]</span><br></pre></td></tr></table></figure>
<h2 id="显示暂存区和工作区的差异"><a href="#显示暂存区和工作区的差异" class="headerlink" title="显示暂存区和工作区的差异"></a>显示暂存区和工作区的差异</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<h2 id="显示暂存区和上一个commit的差异"><a href="#显示暂存区和上一个commit的差异" class="headerlink" title="显示暂存区和上一个commit的差异"></a>显示暂存区和上一个commit的差异</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff --cached [file]</span><br></pre></td></tr></table></figure>
<h2 id="显示工作区与当前分支最新commit之间的差异"><a href="#显示工作区与当前分支最新commit之间的差异" class="headerlink" title="显示工作区与当前分支最新commit之间的差异"></a>显示工作区与当前分支最新commit之间的差异</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<h2 id="显示两次提交之间的差异"><a href="#显示两次提交之间的差异" class="headerlink" title="显示两次提交之间的差异"></a>显示两次提交之间的差异</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>
<h2 id="显示今天你写了多少行代码"><a href="#显示今天你写了多少行代码" class="headerlink" title="显示今天你写了多少行代码"></a>显示今天你写了多少行代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="显示某次提交的元数据和内容变化"><a href="#显示某次提交的元数据和内容变化" class="headerlink" title="显示某次提交的元数据和内容变化"></a>显示某次提交的元数据和内容变化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [commit]</span><br></pre></td></tr></table></figure>
<h2 id="显示某次提交发生变化的文件"><a href="#显示某次提交发生变化的文件" class="headerlink" title="显示某次提交发生变化的文件"></a>显示某次提交发生变化的文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show --name-only [commit]</span><br></pre></td></tr></table></figure>
<h2 id="显示某次提交时，某个文件的内容"><a href="#显示某次提交时，某个文件的内容" class="headerlink" title="显示某次提交时，某个文件的内容"></a>显示某次提交时，某个文件的内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [commit]:[filename]</span><br></pre></td></tr></table></figure>
<h2 id="显示当前分支的最近几次提交"><a href="#显示当前分支的最近几次提交" class="headerlink" title="显示当前分支的最近几次提交"></a>显示当前分支的最近几次提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h1 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h1><h2 id="下载远程仓库的所有变动"><a href="#下载远程仓库的所有变动" class="headerlink" title="下载远程仓库的所有变动"></a>下载远程仓库的所有变动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch [remote]</span><br></pre></td></tr></table></figure>
<h2 id="显示所有远程仓库"><a href="#显示所有远程仓库" class="headerlink" title="显示所有远程仓库"></a>显示所有远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h2 id="显示某个远程仓库的信息"><a href="#显示某个远程仓库的信息" class="headerlink" title="显示某个远程仓库的信息"></a>显示某个远程仓库的信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show [remote]</span><br></pre></td></tr></table></figure>
<h2 id="增加一个新的远程仓库，并命名"><a href="#增加一个新的远程仓库，并命名" class="headerlink" title="增加一个新的远程仓库，并命名"></a>增加一个新的远程仓库，并命名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>
<h2 id="取回远程仓库的变化，并与本地分支合并"><a href="#取回远程仓库的变化，并与本地分支合并" class="headerlink" title="取回远程仓库的变化，并与本地分支合并"></a>取回远程仓库的变化，并与本地分支合并</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull [remote] [branch]</span><br></pre></td></tr></table></figure>
<h2 id="上传本地指定分支到远程仓库"><a href="#上传本地指定分支到远程仓库" class="headerlink" title="上传本地指定分支到远程仓库"></a>上传本地指定分支到远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure>
<h2 id="强行推送当前分支到远程仓库，即使有冲突"><a href="#强行推送当前分支到远程仓库，即使有冲突" class="headerlink" title="强行推送当前分支到远程仓库，即使有冲突"></a>强行推送当前分支到远程仓库，即使有冲突</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --force</span><br></pre></td></tr></table></figure>
<h2 id="推送所有分支到远程仓库"><a href="#推送所有分支到远程仓库" class="headerlink" title="推送所有分支到远程仓库"></a>推送所有分支到远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure>
<p>九、撤销</p>
<h2 id="恢复暂存区的指定文件到工作区"><a href="#恢复暂存区的指定文件到工作区" class="headerlink" title="恢复暂存区的指定文件到工作区"></a>恢复暂存区的指定文件到工作区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [file]</span><br></pre></td></tr></table></figure>
<h2 id="恢复某个commit的指定文件到暂存区和工作区"><a href="#恢复某个commit的指定文件到暂存区和工作区" class="headerlink" title="恢复某个commit的指定文件到暂存区和工作区"></a>恢复某个commit的指定文件到暂存区和工作区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [commit] [file]</span><br></pre></td></tr></table></figure>
<h2 id="恢复暂存区的所有文件到工作区"><a href="#恢复暂存区的所有文件到工作区" class="headerlink" title="恢复暂存区的所有文件到工作区"></a>恢复暂存区的所有文件到工作区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<h2 id="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"><a href="#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变" class="headerlink" title="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [file]</span><br></pre></td></tr></table></figure>
<h2 id="重置暂存区与工作区，与上一次commit保持一致"><a href="#重置暂存区与工作区，与上一次commit保持一致" class="headerlink" title="重置暂存区与工作区，与上一次commit保持一致"></a>重置暂存区与工作区，与上一次commit保持一致</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<h2 id="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"><a href="#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变" class="headerlink" title="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [commit]</span><br></pre></td></tr></table></figure>
<h2 id="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"><a href="#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致" class="headerlink" title="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard [commit]</span><br></pre></td></tr></table></figure>
<h2 id="重置当前HEAD为指定commit，但保持暂存区和工作区不变"><a href="#重置当前HEAD为指定commit，但保持暂存区和工作区不变" class="headerlink" title="重置当前HEAD为指定commit，但保持暂存区和工作区不变"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --keep [commit]</span><br></pre></td></tr></table></figure>
<h2 id="新建一个commit，用来撤销指定commit"><a href="#新建一个commit，用来撤销指定commit" class="headerlink" title="新建一个commit，用来撤销指定commit"></a>新建一个commit，用来撤销指定commit</h2><h2 id="后者的所有变化都将被前者抵消，并且应用到当前分支"><a href="#后者的所有变化都将被前者抵消，并且应用到当前分支" class="headerlink" title="后者的所有变化都将被前者抵消，并且应用到当前分支"></a>后者的所有变化都将被前者抵消，并且应用到当前分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert [commit]</span><br></pre></td></tr></table></figure>
<h2 id="暂时将未提交的变化移除，稍后再移入"><a href="#暂时将未提交的变化移除，稍后再移入" class="headerlink" title="暂时将未提交的变化移除，稍后再移入"></a>暂时将未提交的变化移除，稍后再移入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive</span><br></pre></td></tr></table></figure>
<h2 id="初始化文件夹，提交到远程并新建分支"><a href="#初始化文件夹，提交到远程并新建分支" class="headerlink" title="初始化文件夹，提交到远程并新建分支"></a>初始化文件夹，提交到远程并新建分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 地址</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql in和exists的区别</title>
    <url>/posts/44708/</url>
    <content><![CDATA[<h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><p>in和exists都是用于范围查找</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">AS</span> 外表 <span class="keyword">WHERE</span>  <span class="keyword">EXISTS</span> (<span class="keyword">select</span> b.user_id <span class="keyword">FROM</span> t_user_org 内表 <span class="keyword">WHERE</span> a.user_id <span class="operator">=</span>b.user_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">AS</span> 外表 <span class="keyword">WHERE</span>  a.user_id <span class="keyword">in</span> (<span class="keyword">select</span> b.user_id <span class="keyword">FROM</span> t_user_org 内表 );</span><br></pre></td></tr></table></figure>
<h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><ol>
<li>in是把外表和内表做hash链接，先查询内表（b表）返回数据列，在将返回的数据列给外表（a表）做比较，无论子表是否有数据都对子查询进行全部匹配</li>
<li>exists是对外表做loop循环，循环后在对内表进行查询，将外表查询的接口放到exists中做条件验证，根据验证结果true和false来过滤数据，如果有一个存在则返回外表所有数据</li>
</ol>
<p><strong>外表查询结果集大的用in,内表查询结果集大的用exstis</strong></p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo相关命令</title>
    <url>/posts/1038/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using H     exo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo cl</span><br></pre></td></tr></table></figure>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea常用插件</title>
    <url>/posts/3338/</url>
    <content><![CDATA[<h1 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h1><p>在右下角弹出和鼠标相同操作的idea快捷键</p>
<h1 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h1><p>翻译工具可使用谷歌翻译（默认），百度翻译，有道翻译<br>快捷键：<code>Ctrl+Alt+Y</code>，翻译选中的文字<br><code>Ctrl+Alt+X</code>，将选中的文字替换为翻译后的文件</p>
<h1 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h1><p>忽略文件,防止误提交</p>
<h1 id="GsonFormatPlus"><a href="#GsonFormatPlus" class="headerlink" title="GsonFormatPlus"></a>GsonFormatPlus</h1><p>可以根据JSON生成实体类<br>快捷键：<code>Alt+S</code></p>
<h1 id="MyBatisCodeHelperPro-Marketplace-Edition"><a href="#MyBatisCodeHelperPro-Marketplace-Edition" class="headerlink" title="MyBatisCodeHelperPro (Marketplace Edition)"></a>MyBatisCodeHelperPro (Marketplace Edition)</h1><p>mybatis.xml和dao层可以互相跳转<br>可以根据dao层的方法名自动生成mybatis.xml的配置</p>
<h1 id="MyBatis-Log-Plugin-（已收费，可免费试用30天）"><a href="#MyBatis-Log-Plugin-（已收费，可免费试用30天）" class="headerlink" title="MyBatis Log Plugin （已收费，可免费试用30天）"></a>MyBatis Log Plugin （已收费，可免费试用30天）</h1><p>可以将输出在控制台的mybatis的sql日志格式化可以直接执行的sql；也可以使用这个插件达到相同的功能需要自动导入改插件,地址：<a href="https://github.com/Link-Kou/intellij-mybaitslog">https://github.com/Link-Kou/intellij-mybaitslog</a></p>
<h1 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h1><p>阿里巴巴代码规范插件</p>
<h1 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h1><p>代码略缩图</p>
<h1 id="Free-Mybatis-plugin"><a href="#Free-Mybatis-plugin" class="headerlink" title="Free Mybatis plugin"></a>Free Mybatis plugin</h1><p>可以自由的在dao和xml自由跳转</p>
<h1 id="CamelCase"><a href="#CamelCase" class="headerlink" title="CamelCase"></a>CamelCase</h1><p>修改字段的格式，如将字段的格式该为驼峰命名法；<br>快捷键：<code>Shift + Alt + U</code></p>
<h1 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h1><p>修改字段的格式<br>快捷键：<code>Alt+M</code>和<code>Alt+Shift+M</code></p>
<h1 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h1><p>idea控制台可以根据日志的不同等级展示不用的颜色</p>
<h1 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a><del>GsonFormat</del></h1><p>可以根据JSON生成实体类,已不维护,最新版的idea(2020版本以上)已不支持，可以替换为<strong>GsonFormatPlus</strong></p>
<h1 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h1><p>可以自动生成getter，setter等方法，在2021版本idea已集成该插件<br>需要导入maven包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h1><p>idea暗黑主题</p>
<h1 id="Maven-helper"><a href="#Maven-helper" class="headerlink" title="Maven helper"></a>Maven helper</h1><p>maven插件，可以用来查看冲突的jar包</p>
<h1 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h1><p>一套 RESTful 服务开发辅助工具集可以在侧边栏生成对应的url和部分入参</p>
<h1 id="SequenceDiagram"><a href="#SequenceDiagram" class="headerlink" title="SequenceDiagram"></a>SequenceDiagram</h1><p>方法调用时序图</p>
<h1 id="JavaDoc-Clean-Read"><a href="#JavaDoc-Clean-Read" class="headerlink" title="JavaDoc Clean Read"></a>JavaDoc Clean Read</h1><p>javadoc 格式化。需要付费</p>
<h1 id="GenerateAllSetter"><a href="#GenerateAllSetter" class="headerlink" title="GenerateAllSetter"></a>GenerateAllSetter</h1><p>自动生成实体类的所有set方法；快捷键<code>Alt+Enter</code></p>
<h1 id="Chinese-Simplified-Language-Pack-中文语言包"><a href="#Chinese-Simplified-Language-Pack-中文语言包" class="headerlink" title="Chinese (Simplified) Language Pack &#x2F; 中文语言包"></a>Chinese (Simplified) Language Pack &#x2F; 中文语言包</h1><p>idea官方汉化插件</p>
<h1 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h1><p>花括号插件</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>live Template 模板</title>
    <url>/posts/62813/</url>
    <content><![CDATA[<h1 id="restMapping"><a href="#restMapping" class="headerlink" title="restMapping"></a>restMapping</h1><hr>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.web.bind.annotation.RestController</span><br><span class="line"><span class="meta">@org</span>.springframework.web.bind.annotation.RequestMapping(<span class="string">&quot;/$END$&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h1><p>slf4j生成slf4j方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger($ClassName$.class);</span><br></pre></td></tr></table></figure>
<h1 id="anno"><a href="#anno" class="headerlink" title="anno"></a>anno</h1><p>生成原注解需要的基本注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java</span>.lang.annotation.Target(&#123;java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@java</span>.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@java</span>.lang.annotation.Documented</span><br></pre></td></tr></table></figure>
<h1 id="gsta"><a href="#gsta" class="headerlink" title="gsta"></a>gsta</h1><p>生成lombok的Getter，Setter，ToString及链式需要的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@lombok</span>.Getter </span><br><span class="line"><span class="meta">@lombok</span>.Setter </span><br><span class="line"><span class="meta">@lombok</span>.ToString </span><br><span class="line"><span class="meta">@lombok</span>.experimental.Accessors(chain  = <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<h1 id="prs"><a href="#prs" class="headerlink" title="prs"></a>prs</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String $END$;</span><br></pre></td></tr></table></figure>
<h1 id="pus"><a href="#pus" class="headerlink" title="pus"></a>pus</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String $END$;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis源码解析</title>
    <url>/posts/49336/</url>
    <content><![CDATA[<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><img src="/posts/49336/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E6%9E%B6%E6%9E%84%E5%9B%BE.png" class="" title="mybatis源码解析-架构图.png">
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><img src="/posts/49336/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="mybatis源码解析-流程图.png">
<h1 id="配置读取"><a href="#配置读取" class="headerlink" title="配置读取"></a>配置读取</h1><h2 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h2><blockquote>
<p>通过SqlSessionFactoryBuilder读取配置文件生成SqlSessionFactory</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader, String environment, Properties properties)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// xml属性解析</span></span><br><span class="line">      <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(reader, environment, properties);</span><br><span class="line">      <span class="comment">// 从xml配置文件中获取生成sqlSessionFactory需要的配置信息</span></span><br><span class="line">      <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error building SqlSession.&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        reader.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// Intentionally ignore. Prefer previous error.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper-xml文件解析"><a href="#mapper-xml文件解析" class="headerlink" title="mapper.xml文件解析"></a>mapper.xml文件解析</h2><h3 id="XMLMapperBuilder"><a href="#XMLMapperBuilder" class="headerlink" title="XMLMapperBuilder"></a>XMLMapperBuilder</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 判断该文件有没有被解析</span></span><br><span class="line">   <span class="keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;</span><br><span class="line">     <span class="comment">// 解析mapper.xml的数据</span></span><br><span class="line">     configurationElement(parser.evalNode(<span class="string">&quot;/mapper&quot;</span>));</span><br><span class="line">     <span class="comment">// 标识该配置文件已经被解析  </span></span><br><span class="line">     configuration.addLoadedResource(resource);</span><br><span class="line">     <span class="comment">// 将namespance和mapper绑定 </span></span><br><span class="line">     bindMapperForNamespace();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   parsePendingResultMaps();</span><br><span class="line">   parsePendingCacheRefs();</span><br><span class="line">   parsePendingStatements();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="sql解析"><a href="#sql解析" class="headerlink" title="sql解析"></a>sql解析</h1><h2 id="SqlSouce"><a href="#SqlSouce" class="headerlink" title="SqlSouce"></a>SqlSouce</h2><blockquote>
<p>根据xml文件或映射语句解析成sql</p>
</blockquote>
<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><img src="/posts/49336/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-SqlSouce%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" class="" title="mybatis源码解析-SqlSouce实现类.png">

<h3 id="RawSqlSouce"><a href="#RawSqlSouce" class="headerlink" title="RawSqlSouce"></a>RawSqlSouce</h3><p>负责处理静态sql,并将封装好的sql封装为StaticSqlSource返回</p>
<h3 id="StaticSqlSource"><a href="#StaticSqlSource" class="headerlink" title="StaticSqlSource"></a>StaticSqlSource</h3><p>处理静态sql可能含有”?”占位符，可以被数据直接执行</p>
<h3 id="ProviderSqlSouce"><a href="#ProviderSqlSouce" class="headerlink" title="ProviderSqlSouce"></a>ProviderSqlSouce</h3><p>处理方法上含有”@ProviderXXX”注解的sqlSource实现类</p>
<h3 id="DynamicSqlSource"><a href="#DynamicSqlSource" class="headerlink" title="DynamicSqlSource"></a>DynamicSqlSource</h3><p>负责处理动态sql</p>
<h1 id="sql执行"><a href="#sql执行" class="headerlink" title="sql执行"></a>sql执行</h1><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>sql执行器</p>
<h2 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h2><p>最终由该组件负责sql执行</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis级联查询-collection</title>
    <url>/posts/22927/</url>
    <content><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>准备数据<br>创建数据库jilian<br>在数据库中创建俩个表studen和teacher表，<br>俩者关系：teacher通过主键id和student表的teacher_id字段相关联（一对多关系）</p>
<h2 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher (</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;教师名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;教师表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">student_name <span class="type">varchar</span>(<span class="number">64</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生名称&#x27;</span>,</span><br><span class="line">teacher_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;教师id&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.teacher (id, name) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;李老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.teacher (id, name) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;王老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.teacher (id, name) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;钱老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;李一&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;李二&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;李三&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;王一&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;王三&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jilian.student (id, student_name, teacher_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;王二&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="利用mybatis-generator生成相对应的实体类，dao和mapper"><a href="#利用mybatis-generator生成相对应的实体类，dao和mapper" class="headerlink" title="利用mybatis-generator生成相对应的实体类，dao和mapper"></a>利用mybatis-generator生成相对应的实体类，dao和mapper</h2><h3 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ting.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * student</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 教师id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="StudentMapper-java"><a href="#StudentMapper-java" class="headerlink" title="StudentMapper.java"></a>StudentMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.java.ting.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(Student record)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="StudentMapper-xml"><a href="#StudentMapper-xml" class="headerlink" title="StudentMapper.xml"></a>StudentMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">id, student_name, teacher_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">    from student</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">delete from student</span><br><span class="line">where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    insert into student (student_name, teacher_id)</span><br><span class="line">    values (#&#123;studentName,jdbcType=VARCHAR&#125;, #&#123;teacherId,jdbcType=INTEGER&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertSelective&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    insert into student</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName != null&quot;</span>&gt;</span></span><br><span class="line">            student_name,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;teacherId != null&quot;</span>&gt;</span></span><br><span class="line">            teacher_id,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName != null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;studentName,jdbcType=VARCHAR&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;teacherId != null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;teacherId,jdbcType=INTEGER&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByPrimaryKeySelective&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName != null&quot;</span>&gt;</span></span><br><span class="line">            student_name = #&#123;studentName,jdbcType=VARCHAR&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;teacherId != null&quot;</span>&gt;</span></span><br><span class="line">            teacher_id = #&#123;teacherId,jdbcType=INTEGER&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    set student_name = #&#123;studentName,jdbcType=VARCHAR&#125;,</span><br><span class="line">    teacher_id = #&#123;teacherId,jdbcType=INTEGER&#125;</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Teacher-java"><a href="#Teacher-java" class="headerlink" title="Teacher.java"></a>Teacher.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * teacher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tingOu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 教师名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TeacherMapper-java"><a href="#TeacherMapper-java" class="headerlink" title="TeacherMapper.java"></a>TeacherMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Teacher record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(Teacher record)</span>;</span><br><span class="line"></span><br><span class="line">    Teacher <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(Teacher record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(Teacher record)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="TeacherMapper-xml"><a href="#TeacherMapper-xml" class="headerlink" title="TeacherMapper.xml"></a>TeacherMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.java.ting.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.domain.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id, `name`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from teacher</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        delete from teacher</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Teacher&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        insert into teacher (`name`)</span><br><span class="line">        values (#&#123;name,jdbcType=VARCHAR&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertSelective&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Teacher&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        insert into teacher</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                `name`,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByPrimaryKeySelective&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Teacher&quot;</span>&gt;</span></span><br><span class="line">        update teacher</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                `name` = #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.java.ting.domain.Teacher&quot;</span>&gt;</span></span><br><span class="line">        update teacher</span><br><span class="line">        set `name` = #&#123;name,jdbcType=VARCHAR&#125;</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="新增一个TeacherDto用来接口级联查询出的数据"><a href="#新增一个TeacherDto用来接口级联查询出的数据" class="headerlink" title="新增一个TeacherDto用来接口级联查询出的数据"></a>新增一个TeacherDto用来接口级联查询出的数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.java.ting.domain.Student;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试级联-一对多</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LISHUANG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 教师名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生信息集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="在StudentMapper类中新建一个方法"><a href="#在StudentMapper类中新建一个方法" class="headerlink" title="在StudentMapper类中新建一个方法"></a>在StudentMapper类中新建一个方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据教师名称获取信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> teacherId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 学生信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">findStudentByTeacherId</span><span class="params">(Integer teacherId)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="对应的mapper"><a href="#对应的mapper" class="headerlink" title="对应的mapper"></a>对应的mapper</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentByTeacherId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">    from student</span><br><span class="line">    where</span><br><span class="line">    teacher_id = #&#123;teacherId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在TeacherMapper类中新建俩个方法用来测试俩种方式"><a href="#在TeacherMapper类中新建俩个方法用来测试俩种方式" class="headerlink" title="在TeacherMapper类中新建俩个方法用来测试俩种方式"></a>在TeacherMapper类中新建俩个方法用来测试俩种方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;TeacherDto&gt; <span class="title function_">getTeacherAndStudentById</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">List&lt;TeacherDto&gt; <span class="title function_">getTeacherAndStudentByIdLeftJoin</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<h2 id="对应的mapper-1"><a href="#对应的mapper-1" class="headerlink" title="对应的mapper"></a>对应的mapper</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种 这个会多次查询关联表 n+1次--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.dto.jilian.TeacherDto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.java.ting.mapper.StudentMapper.findStudentByTeacherId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;&#123;teacherId = id&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种 利用左链接查询 效率快--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultLeftJoin&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.dto.jilian.TeacherDto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseStudent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List_left&quot;</span>&gt;</span></span><br><span class="line">    t.id, t.`name`, s.id as student_id, s.student_name as student_name, s.teacher_id as teacher_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种 end--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherAndStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultList&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">    from teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherAndStudentByIdLeftJoin&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultLeftJoin&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List_left&quot;</span>/&gt;</span></span><br><span class="line">    from teacher t</span><br><span class="line">    left JOIN student s on t.id = s.teacher_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="新建个JiLianController用来测试"><a href="#新建个JiLianController用来测试" class="headerlink" title="新建个JiLianController用来测试"></a>新建个JiLianController用来测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.ting.dto.jilian.TeacherDto;</span><br><span class="line"><span class="keyword">import</span> com.java.ting.mapper.TeacherMapper;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LISHUANG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/web&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JiLianController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherMapper teacherMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybatis级联测试-collection使用select标签</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;和数据库的交互次数 1+n 数据量越大效率越慢&lt;pre&gt;1：代表查询教师表的次数；&lt;/pre&gt;&lt;pre&gt;n：代表查询学生表的次数&lt;/pre&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;TeacherDto&gt; 教师和学生关联数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;mybatis级联测试-collection使用select&quot;, notes = &quot;Mybatis&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/jilian/collection/select&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TeacherDto&gt; <span class="title function_">getCollectionSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;TeacherDto&gt; list = teacherMapper.getTeacherAndStudentById();</span><br><span class="line">        log.info(<span class="string">&quot;展示数据级联--&#123;&#125;&quot;</span>, JSON.toJSON(list));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybatis级联测试-collection使用左连接</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;直接使用sql进行查询一次只和数据库交互一次,比&#123;<span class="doctag">@link</span> TeacherMapper#getTeacherAndStudentById&#125;方法用时更少&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  List&lt;TeacherDto&gt; 教师和学生关联数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;mybatis级联测试-collection使用左连接&quot;, notes = &quot;Mybatis&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/jilian/leftJoin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TeacherDto&gt; <span class="title function_">getLeftJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;TeacherDto&gt; list = teacherMapper.getTeacherAndStudentByIdLeftJoin();</span><br><span class="line">        log.info(<span class="string">&quot;展示数据-----&#123;&#125;&quot;</span>, JSON.toJSON(list));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="调用接口进行对比"><a href="#调用接口进行对比" class="headerlink" title="调用接口进行对比"></a>调用接口进行对比</h1><ul>
<li><p>启动项目后调用<a href="http://localhost:xxx/web/jilian/collection/select">http://localhost:xxx/web/jilian/collection/select</a>发现使用select的会和数据库进行4次交互，如下图（使用idea插件MyBatis Log Plugin）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  restore sql from selection  - ==&gt;</span><br><span class="line">select id, `name`</span><br><span class="line"> FROM teacher;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">2</span>  restore sql from selection  - ==&gt;</span><br><span class="line">select id, student_name, teacher_id</span><br><span class="line"> FROM student</span><br><span class="line"> <span class="type">WHERE</span> <span class="variable">teacher_id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">3</span>  restore sql from selection  - ==&gt;</span><br><span class="line">select id, student_name, teacher_id</span><br><span class="line"> FROM student</span><br><span class="line"> <span class="type">WHERE</span> <span class="variable">teacher_id</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">4</span>  restore sql from selection  - ==&gt;</span><br><span class="line">select id, student_name, teacher_id</span><br><span class="line"> FROM student</span><br><span class="line"> <span class="type">WHERE</span> <span class="variable">teacher_id</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用<a href="http://localhost:6850/web/jilian/leftJoin%E5%8F%AA%E4%BC%9A%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E4%BA%A4%E4%BA%92">http://localhost:6850/web/jilian/leftJoin只会和数据库进行一次交互</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--  <span class="number">5</span>  <span class="number">2020</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">15</span>:<span class="number">12</span>:<span class="number">38.105</span> [http-nio-<span class="number">6850</span>-exec-<span class="number">2</span>] DEBUG c.j.t.m.T.getTeacherAndStudentByIdLeftJoin - ==&gt;</span><br><span class="line">select t.id, t.`name`, s.id as student_id, s.student_name as student_name, s.teacher_id as teacher_id</span><br><span class="line"> FROM teacher t</span><br><span class="line"> LEFT JOIN student s</span><br><span class="line"> ON t.id = s.teacher_id;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
</li>
<li><p>俩者五次调用的用时</p>
<table>
<thead>
<tr>
<th align="center">次数</th>
<th align="center">getTeacherAndStudentById方法</th>
<th align="center">getTeacherAndStudentByIdLeftJoin方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">130ms</td>
<td align="center">50ms</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">114ms</td>
<td align="center">53ms</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">118ms</td>
<td align="center">50ms</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">119ms</td>
<td align="center">50ms</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">118ms</td>
<td align="center">58ms</td>
</tr>
</tbody></table>
</li>
</ul>
<p>使用左连接的getTeacherAndStudentByIdLeftJoin的方法基本上都比使用拼接查询的getTeacherAndStudentById方法快上俩倍以上</p>
<h1 id="详解俩种方法"><a href="#详解俩种方法" class="headerlink" title="详解俩种方法"></a>详解俩种方法</h1><ol>
<li>第一种使用拼接查询的方法<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.dto.jilian.TeacherDto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.java.ting.mapper.StudentMapper.findStudentByTeacherId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;&#123;teacherId = id&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>property 中的参数要和TeacherDto实体类中的list属性名一样</p>
</li>
<li><p>ofType是该放回的实体类类型，</p>
</li>
<li><p>select的参数是关联的使用哪个查询方法；</p>
</li>
<li><p>column&#x3D;”{teacherId &#x3D; id} 中{}中的字段对应关系，teacherId 是Student实体对应的字段，id是上面result中相对应，column中的字段俩者在表中必须有关联关系。不然无法建立关系。</p>
<pre><code> 数据库的列名或者列标签别名。与传递给select中配置的方法名参数名称相同。注意： 在处理组合键时，可以使用column=“&#123;prop1=col1,prop2=col2&#125;”这样的语法，设置多个列名传入到嵌套查询语句。这就会把prop1和prop2设置到目标嵌套选择语句的参数对象中。
</code></pre>
</li>
</ul>
<ol start="2">
<li>使用链接查询<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第二种 利用左链接查询 效率快--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultLeftJoin&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.dto.jilian.TeacherDto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseStudent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.java.ting.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List_left&quot;</span>&gt;</span></span><br><span class="line">    t.id, t.`name`, s.id as student_id, s.student_name as student_name, s.teacher_id as teacher_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种 end--&gt;</span></span><br></pre></td></tr></table></figure>
 第二种和第一种的区别就是在collection中使用定制的resultMap和sql字段</li>
</ol>
<ul>
<li>collection中的property和第一种一样都是TeacherDto实体类对应的属性</li>
<li>collection中的resultMap是使用地址的resultMap的id</li>
<li>定制的resultMap中的result的column一定要和上面的resultMap的字段不能重复否则无法正确的展示出先要的数据</li>
<li>select标签中也要使用定制的 最好使用别名进行区分，此时要和定制的resultMap中的column中字段保持一致，因为如果不使用别名可能teacher表和student表中的字段名重复，导致数据展示异常</li>
</ul>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis自定义拦截器模板</title>
    <url>/posts/6721/</url>
    <content><![CDATA[<h1 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册mybatis拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LISHUANG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TestInterceptor <span class="title function_">testInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="重写SqlSource"><a href="#重写SqlSource" class="headerlink" title="重写SqlSource"></a>重写SqlSource</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部辅助类，作用是包装sql</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LISHUANG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoundSqlSqlSource</span> <span class="keyword">implements</span> <span class="title class_">SqlSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BoundSql boundSql;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BoundSqlSqlSource</span><span class="params">(BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.boundSql = boundSql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BoundSql <span class="title function_">getBoundSql</span><span class="params">(Object parameterObject)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> boundSql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义mybatis拦截-示例只拦截query方法"><a href="#自定义mybatis拦截-示例只拦截query方法" class="headerlink" title="自定义mybatis拦截(示例只拦截query方法)"></a>自定义mybatis拦截(示例只拦截query方法)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.DefaultReflectorFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.factory.DefaultObjectFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现自定义的sql</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LISHUANG</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(@Signature(</span></span><br><span class="line"><span class="meta">        type = Executor.class, method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">this</span>.queryInvocation(invocation);</span><br><span class="line">        <span class="comment">// 责任传递</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询语句拦截</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">queryInvocation</span><span class="params">(Invocation invocation)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入自定义query拦截器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取MappedStatement</span></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">arg</span> <span class="operator">=</span> (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sql</span></span><br><span class="line">        <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> arg.getSqlSource();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">        <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> sqlSource.getBoundSql(param);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sql)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新的 MappedStatement</span></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">newMappedStatement</span> <span class="operator">=</span> <span class="built_in">this</span>.copyFromMappedStatement(arg, <span class="keyword">new</span> <span class="title class_">BoundSqlSqlSource</span>(boundSql));</span><br><span class="line"></span><br><span class="line">        <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> MetaObject.forObject(newMappedStatement,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DefaultObjectFactory</span>(), <span class="keyword">new</span> <span class="title class_">DefaultObjectWrapperFactory</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DefaultReflectorFactory</span>());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;sqlSource.boundSql.sql&quot;</span>, <span class="built_in">this</span>.newSql(sql));</span><br><span class="line">        invocation.getArgs()[<span class="number">0</span>] = newMappedStatement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建新的MappedStatement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newSqlSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MappedStatement <span class="title function_">copyFromMappedStatement</span><span class="params">(MappedStatement ms, SqlSource newSqlSource)</span> &#123;</span><br><span class="line">        MappedStatement.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappedStatement</span>.Builder(ms.getConfiguration(), ms.getId(),</span><br><span class="line">                newSqlSource, ms.getSqlCommandType());</span><br><span class="line"></span><br><span class="line">        builder.resource(ms.getResource());</span><br><span class="line">        builder.fetchSize(ms.getFetchSize());</span><br><span class="line">        builder.statementType(ms.getStatementType());</span><br><span class="line">        builder.keyGenerator(ms.getKeyGenerator());</span><br><span class="line">        <span class="keyword">if</span> (ms.getKeyProperties() != <span class="literal">null</span> &amp;&amp; ms.getKeyProperties().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.keyProperty(ms.getKeyProperties()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.timeout(ms.getTimeout());</span><br><span class="line">        builder.parameterMap(ms.getParameterMap());</span><br><span class="line">        builder.resultMaps(ms.getResultMaps());</span><br><span class="line">        builder.resultSetType(ms.getResultSetType());</span><br><span class="line">        builder.cache(ms.getCache());</span><br><span class="line">        builder.flushCacheRequired(ms.isFlushCacheRequired());</span><br><span class="line">        builder.useCache(ms.isUseCache());</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义sql</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">newSql</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;封装前的sql: &#123;&#125;&quot;</span>, sql);</span><br><span class="line">        sql += <span class="string">&quot; limit 1&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;封装后的sql: &#123;&#125;&quot;</span>, sql);</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql json</title>
    <url>/posts/21619/</url>
    <content><![CDATA[<p><a href="https://www.sjkjc.com/mysql-ref/json_search/">https://www.sjkjc.com/mysql-ref/json_search&#x2F;</a></p>
<h1 id="根据json-value匹配数据"><a href="#根据json-value匹配数据" class="headerlink" title="根据json value匹配数据"></a>根据json value匹配数据</h1><blockquote>
<p><strong>利用mysql json的json seacch功能匹配路径来实现</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	extra_info </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	t_shop </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	JSON_SEARCH( extra_info, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;%1%&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;$[*].props[*].propValue&#x27;</span> ) <span class="operator">!=</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql事务隔离级别</title>
    <url>/posts/9268/</url>
    <content><![CDATA[<h1 id="四大特征"><a href="#四大特征" class="headerlink" title="四大特征"></a>四大特征</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。 </p>
<h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>指在事务开始之前和事务结束以后，数据不会被破坏<br>例：假如 A 账户给 B 账户转 10 块钱，不管成功与否，A 和B 的总金额是不变的。 </p>
<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p> 多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效 果。简言之，就是事务之间是互不影响的。 </p>
<h2 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h2><p>表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。  </p>
<h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><h2 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h2><p>可以读取其它事务未提交的数据</p>
<h2 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h2><p>该事务可以读取到其他事务提交的数据</p>
<h2 id="可重复读（默认级别）"><a href="#可重复读（默认级别）" class="headerlink" title="可重复读（默认级别）"></a>可重复读（默认级别）</h2><p>事务开启后，不在允许修改数据</p>
<h2 id="串行读"><a href="#串行读" class="headerlink" title="串行读"></a>串行读</h2><p>加锁读，串行执行</p>
<h1 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h1><img src="/posts/9268/mysql%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98.png" class="" title="mysql事务问题.png">
<h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>读取到了其他事务没有提交的数据</p>
<img src="/posts/9268/msyql%E8%84%8F%E8%AF%BB.png" class="" title="msyql 脏读.png">
<h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>同一个事务前后两次查询的数据不一致</p>
<img src="/posts/9268/mysql%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png" class="" title="mysql不可重复读.png">
<h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p>一次事务中前后数据量发生变化</p>
<img src="/posts/9268/mysql%E5%B9%BB%E8%AF%BB.png" class="" title="mysql幻读.png">





]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql日志</title>
    <url>/posts/2925/</url>
    <content><![CDATA[<h1 id="sql执行顺序"><a href="#sql执行顺序" class="headerlink" title="sql执行顺序"></a>sql执行顺序</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h2><blockquote>
<p>binlog存储对数据库所有操作行为的记录，主要用于mysql的主从同步和数据恢复</p>
</blockquote>
<h3 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取binlog有没有开启及日志文件存储的位置</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;log_bin%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 获取binlog的记录格式</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;binlog_format%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><table>
<thead>
<tr>
<th></th>
<th>ROW(建议使用)</th>
<th>STANTEMENT</th>
<th>MIXED</th>
</tr>
</thead>
<tbody><tr>
<td>特点</td>
<td>记录对行的操作记录</td>
<td></td>
<td></td>
</tr>
<tr>
<td>如果一个update语句更新了10行数据则会存储该10行的操作记录，</td>
<td>记录sql语句</td>
<td>ROW和STANTMENT的混合体</td>
<td></td>
</tr>
<tr>
<td>优点</td>
<td>因为是存储基于行的操作记录，所以不会导致主备不一致，</td>
<td>只记录sql语句，相较ROW会更加的减少空间和避免大量的IO操作</td>
<td>减少空间和避免大量的IO操作。同时会判断当前的执行操作会不会导致主备不一致，如果会的话，就会使用ROW格式存储</td>
</tr>
<tr>
<td>缺点</td>
<td>IO的操作&#x2F;文件大小都会比其他俩中更多&#x2F;更大</td>
<td>可能会导致主备不一致,且因为存储的时sql语句，所有当有慢sql时从库做备份时也会执行一次，导致备份时间过长</td>
<td>相当于其他俩种的折中，但也存在和STATEMENT一样主从备份不一致的问题</td>
</tr>
<tr>
<td>日志文件比ROW小，但准确性比ROW底；</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>日志文件比STATEMENT较大，但准确性比STANRTEMENT高；</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><blockquote>
<p>只有当mysql的引擎是innodb时，才会存在，记录事务对数据的修改记录，保证了mysql事务的原子性和持久性</p>
</blockquote>
<h3 id="刷盘机制"><a href="#刷盘机制" class="headerlink" title="刷盘机制"></a>刷盘机制</h3><p>属性：innodb_flush_log_at_trx_commit</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看刷盘机制类型</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看innodb_log_buffer_size的大小</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_log_buffer_size&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h4><table>
<thead>
<tr>
<th>类型</th>
<th>0</th>
<th>1（默认）</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>机制</td>
<td>每次提交事务时不进行刷盘操作,</td>
<td>每次提交事务时都会进行刷盘操作</td>
<td>每次提交事务时都只把redo log buffer内从写入page cache(文件系统缓存)</td>
</tr>
<tr>
<td>缺点</td>
<td>mysql挂了或者宕机会缺失1s的数据</td>
<td>只有事务没有完成且mysql宕机了才会缺失1s的数据</td>
<td>只有事务没有完成且mysql宕机了才会缺失1s的数据</td>
</tr>
<tr>
<td>备注</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>后台都会有一个后台线程，每个1s,都会把redo log buffer写到page cache中，然后调用fsyns刷盘，所以说机制为0也会刷盘</li>
<li>当redo log buffer占用的空间达到innodb_log_buffer_size一半时，后台也会主动刷盘<br> |  |  |</li>
</ul>
<h4 id="innodb-log-buffer-size-0"><a href="#innodb-log-buffer-size-0" class="headerlink" title="innodb_log_buffer_size &#x3D;0"></a>innodb_log_buffer_size &#x3D;0</h4><img src="/posts/2925/mysql%E6%97%A5%E5%BF%9700.jpg" class="" title="mysql日志00.jpg">
<h4 id="innodb-log-buffer-size-1"><a href="#innodb-log-buffer-size-1" class="headerlink" title="innodb_log_buffer_size &#x3D;1"></a>innodb_log_buffer_size &#x3D;1</h4><img src="/posts/2925/mysql%E6%97%A5%E5%BF%9701.jpg" class="" title="mysql日志01.jpg">
<h4 id="innodb-log-buffer-size-2"><a href="#innodb-log-buffer-size-2" class="headerlink" title="innodb_log_buffer_size &#x3D;2"></a>innodb_log_buffer_size &#x3D;2</h4><img src="/posts/2925/mysql%E6%97%A5%E5%BF%9702.jpg" class="" title="mysql日志02.jpg">

<h1 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a>undolog</h1><p><strong>undo log有两个作用：提供回滚和多个行版本控制(MVCC)。</strong><br>在数据修改的时候，不仅记录了redo，还记录了相对应的undo，如果因为某些原因导致事务失败或回滚了，可以借助该undo进行回滚。<br>undo log和redo log记录物理日志不一样，它是逻辑日志。<strong>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</strong></p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql语句</title>
    <url>/posts/38385/</url>
    <content><![CDATA[<h1 id="查看当前正在执行的sql"><a href="#查看当前正在执行的sql" class="headerlink" title="查看当前正在执行的sql"></a>查看当前正在执行的sql</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 第一种查询</span></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br><span class="line"><span class="comment">-- 第二种查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`PROCESSLIST`;</span><br></pre></td></tr></table></figure>
<h1 id="修改mysql接收的数据包大小"><a href="#修改mysql接收的数据包大小" class="headerlink" title="修改mysql接收的数据包大小"></a>修改mysql接收的数据包大小</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询</span></span><br><span class="line"><span class="keyword">show</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%max_allowed_packet%&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_allowed_packet <span class="operator">=</span> <span class="number">2</span><span class="operator">*</span><span class="number">1024</span><span class="operator">*</span><span class="number">1024</span><span class="operator">*</span><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>此时只是临时修改，mysql服务重启后失效</p>
<p>第二种<br>修改my.ini文件中的配置；在[mysqld]部分加入 max_allowed_packet&#x3D;大小，重启后永久有效</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper</title>
    <url>/posts/48434/</url>
    <content><![CDATA[<h1 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h1><blockquote>
<p>分布式的协调服务，主要用户解决分布式系统中多个进程之间的同步限制，防止出现脏读;</p>
</blockquote>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>统一命名服务</li>
</ul>
<p>ip映射域名</p>
<ul>
<li>统一配置管理</li>
</ul>
<p>znode存储配置消息</p>
<ul>
<li>统一集群管理</li>
</ul>
<p>znode存储集群节点的实时状态</p>
<ul>
<li>服务动态上下线</li>
</ul>
<p>创建临时节点用户服务动态上下线</p>
<ul>
<li>软负载均衡</li>
</ul>
<p>znode存储服务器的访问次数，</p>
<ul>
<li>分布式锁</li>
</ul>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol>
<li>zk：一个领导者多个跟随者组成的集群</li>
<li>集群中只要有半个以上节点存活，zk集群就能正常的提供服务，所以部署zk集群时的节点数量都是奇数</li>
<li>全局数据一致，每个节点保存相同一份的数据副本</li>
<li>更新请求顺序执行。来自同一个client的更行请求按其发送顺序依次执行</li>
<li>数据更新原子性，要么成功要么失败</li>
<li>实时性，在一定范围内，client都能读到最新的数据</li>
</ol>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote>
<p>zk数据模型结构类似unix文件的文件系统，整体类型一个树，每一个节点称为znode,每个znode默认存储1mb的数据，每个znode都能通过路径进行唯一标识</p>
</blockquote>
<img src="/posts/48434/zookeeper%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" class="" title="zookeeper数据结构.png">

<h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><table>
<thead>
<tr>
<th>名称</th>
<th>数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>tickTime</td>
<td>num</td>
<td>心跳时长，单位毫秒</td>
</tr>
<tr>
<td>initLimit</td>
<td>num</td>
<td>领导者和跟随者初始连接时能容忍的最多心跳数据（</td>
</tr>
<tr>
<td>tickTime的数量）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>syncLimit</td>
<td>num</td>
<td>领导者和跟随者通讯时长，如果超过这个配置的时间，则去除该跟随者</td>
</tr>
<tr>
<td>dataDir</td>
<td>String</td>
<td>保存zk的数据的本地地址</td>
</tr>
<tr>
<td>dataLogDir</td>
<td>String</td>
<td>存储顺序日志，缺省值为</td>
</tr>
<tr>
<td>dataDir的值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>clinetPort</td>
<td>num</td>
<td>zk的端口</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h1><blockquote>
<p>选举算法FastLeaderElection </p>
</blockquote>
<h2 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h2><h3 id="myid"><a href="#myid" class="headerlink" title="myid"></a>myid</h3><p>每个zk服务器，都需要再数据文件夹下创建一个名为myid的文件，该文件包含整合zk集群下的唯一的整数id,且该整数id必须和配置文件中的的hostnam必须一致(server点后面的id即为myid)，myid越大再选举中的权重越大<br>server.1:zoo1:2888:3888</p>
<h3 id="zxid"><a href="#zxid" class="headerlink" title="zxid"></a>zxid</h3><p>类似为RDBMS中的事务id，用于标识一个更新操作的proposal ID。为了保证顺序性，该zxid必须单调递增。<br>因此zk使用一个64位数来表示<br>高32位是Leader的epoch,从1开始，每次选举出新的Leader，epoch加一<br>低32位为该epoch内的序号，每次epoch变化都会将低32位的序号重置，这样来保证zkid的全局递增性</p>
<h2 id="zj节点状态"><a href="#zj节点状态" class="headerlink" title="zj节点状态"></a>zj节点状态</h2><blockquote>
<p>一个ZK节点可能处于以下4种状态之一，在源码中以QuorumPeer#ServerState枚举来定义。</p>
</blockquote>
<ul>
<li>LOOKING：不确定Leader的“寻找”状态，即当前节点认为集群中没有Leader，进而发起选举；</li>
<li>LEADING：“领导”状态，即当前节点就是Leader，并维护与Follower和Observer的通信，当节点属于Leader时，负责写操作；</li>
<li>FOLLOWING：“跟随”状态，即当前节点是Follower，且正在保持与Leader的通信，当节点属于Follower时只负责读请求；</li>
<li>OBSERVING：“观察”状态，即当前节点是Observer，且正在保持与Leader的通信，但是不参与Leader选举，也不参与集群写操作时的投票。</li>
</ul>
<h2 id="选票数据结构"><a href="#选票数据结构" class="headerlink" title="选票数据结构"></a>选票数据结构</h2><ul>
<li>logicClock</li>
</ul>
<p>用来标识该服务发起的第几轮投票</p>
<ul>
<li>state</li>
</ul>
<p>服务器状态</p>
<ul>
<li><p>self_id</p>
<p>   当前服务的myid</p>
</li>
<li><p>zelf_zxid</p>
</li>
</ul>
<p>当前服务器上保存的最大zxid</p>
<ul>
<li>vote_id</li>
</ul>
<p>被选举的服务器myid</p>
<ul>
<li>vore_zxid</li>
</ul>
<p>被选举的服务器上所保存的最大的zxid</p>
<h2 id="投票流程"><a href="#投票流程" class="headerlink" title="投票流程"></a>投票流程</h2><h3 id="自增选举流程"><a href="#自增选举流程" class="headerlink" title="自增选举流程"></a>自增选举流程</h3><p>zk规定所有有效的投票必须在用一个轮次中，每个服务器在开启新一轮投票时，都会先自增自己维护的logicCLock</p>
<h3 id="初始话投票"><a href="#初始话投票" class="headerlink" title="初始话投票"></a>初始话投票</h3><p>每个服务器在广播自己的选票前，会将自己的投票箱清空，该投票箱保存了所受到的选票。<br>例：服务器2投票给服务器3，服务器3投票给服务器1，则服务器1的投票箱为（2,3），（3,1），（1,1）。票箱只会记录每一个投票者的最后一票，如投票者更新自己的选票，则其它服务器收到给新选票会在自己票箱中更新该服务器的选票</p>
<h3 id="发送初始化选票"><a href="#发送初始化选票" class="headerlink" title="发送初始化选票"></a>发送初始化选票</h3><p>每台服务器最开始都会通过广播把票投给自己</p>
<h3 id="接收外部投票"><a href="#接收外部投票" class="headerlink" title="接收外部投票"></a>接收外部投票</h3><p>服务器会先尝试给其他服务器获取选票，并记入自身的投票箱内。如果无法获取任务外部的投票，则会确认自己是否与集群这种其他服务器保持者有效连接，如果是则重新发送自己的投票；如果否，则马上与之创建连接</p>
<h3 id="判断选举轮次"><a href="#判断选举轮次" class="headerlink" title="判断选举轮次"></a>判断选举轮次</h3><p>收到外部投票时，首次会根据投票信息中所包含的logicClock来进行不做的处理</p>
<ul>
<li>外部投票的logicClock大于自身的logicClock</li>
</ul>
<p>说明此次选举的轮次小于其他服务器的选举轮次，此时立即清空自身的票箱和更新自身的logicClock为新收到的logicClock,然后再对比自己之前的投票与收到的选票以确定是否需要变更自己的投票，最终再次将自己的选票广播出去</p>
<ul>
<li>外部投票的logicClock小于自身的logicClock</li>
</ul>
<p>忽略该投票</p>
<ul>
<li>外部投票的logicClock等于自身的logicClock</li>
</ul>
<p>进行选票pk</p>
<h3 id="选票pk"><a href="#选票pk" class="headerlink" title="选票pk"></a>选票pk</h3><blockquote>
<p>选票pk基于（self_id，self_zxid）与（vote_id,vote_id）的对比</p>
</blockquote>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1>]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>java延迟队列</title>
    <url>/posts/32068/</url>
    <content><![CDATA[<h1 id="1-继承Delayed类"><a href="#1-继承Delayed类" class="headerlink" title="1.继承Delayed类"></a>1.继承Delayed类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jcxx.common.util.delayed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayedItem</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Delayed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> activeTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DelayedItem</span><span class="params">(<span class="type">long</span> activeTime, T data, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="comment">// 将传入的时间转换为超时的时刻</span></span><br><span class="line">        <span class="built_in">this</span>.activeTime = System.currentTimeMillis() + (activeTime &gt; <span class="number">0</span> ? timeUnit.toMillis(activeTime) : <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getActiveTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> activeTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照剩余时间进行排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delayed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed delayed)</span> &#123;</span><br><span class="line">        <span class="type">DelayedItem</span> <span class="variable">delayedItem</span> <span class="operator">=</span> (DelayedItem) delayed;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剩余时间-当前传入的时间= 实际剩余时</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">diff</span> <span class="operator">=</span> <span class="built_in">this</span>.activeTime - delayedItem.getActiveTime();</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">if</span> (diff &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取剩余时间</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 延迟任务是否到时就是按照这个方法判断如果返回的是负数则说明到期否则还没到期</span></span><br><span class="line"><span class="comment">     *	</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> activeTime - System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2.使用方式"></a>2.使用方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    DelayQueue&lt;DelayedItem&lt;Void&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">DelayQueue</span>&lt;&gt;();</span><br><span class="line">    queue.offer(<span class="keyword">new</span> <span class="title class_">DelayedItem</span>&lt;&gt;(<span class="number">1</span>, <span class="literal">null</span>, TimeUnit.MINUTES));</span><br><span class="line">    DelayedItem&lt;Void&gt; item = queue.take();</span><br><span class="line">    System.out.format(<span class="string">&quot;name:&#123;%s&#125;, time:&#123;%s&#125;\n&quot;</span>, item.getData(), LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>队列</tag>
        <tag>juc</tag>
      </tags>
  </entry>
  <entry>
    <title>java类加载流程.md</title>
    <url>/posts/17627/</url>
    <content><![CDATA[<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><a href="https://www.processon.com/diagraming/60c1aafb1e085306cf6c540b">https://www.processon.com/diagraming/60c1aafb1e085306cf6c540b</a></p>
<h1 id="流程解释"><a href="#流程解释" class="headerlink" title="流程解释"></a>流程解释</h1><h2 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h2><blockquote>
<p>加载阶段是类加载过程的第一个阶段。在这个阶段，JVM 的主要目的是将字节码从各个位置（网络、磁盘等）转化为二进制字节流加载到内存中，接着会为这个类在 JVM 的方法区创建一个对应的 Class 对象，这个 Class 对象就是这个类各种数据的访问入口</p>
</blockquote>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h4><p>Booostrap ClassLoader：主要负责加载java安装目录lib下的核心类</p>
<h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><p>Extension ClassLoader：主要加载java安装目录lib\ext目录下的类</p>
<h4 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h4><p>App ClassLoader：主要负责加载ClassPath环境变量指定的路径的类</p>
<h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><a href="https://www.processon.com/diagraming/60c1aafb1e085306cf6c540b">https://www.processon.com/diagraming/60c1aafb1e085306cf6c540b</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h2 id="验证阶段"><a href="#验证阶段" class="headerlink" title="验证阶段"></a>验证阶段</h2><p>在把<code>.class</code>文件加载到内存之前根据java虚拟机的规范判断<code>.class</code>文件是否符合规范</p>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>给类分配一定的内存空间，并给类变量分配空间和赋值</p>
<blockquote>
<p>注意事项</p>
</blockquote>
<ul>
<li>只给类变量分配内存空间和初始化值，不会给成员变量分配空间和初始化值</li>
<li>给类变量初始化值得时候，不是使用代码里面赋的值，而是使用该数据类型的默认值</li>
<li>如果是被final修饰的类变量会直接使用代码中赋予的值，而不是使用默认值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类变量 （在准备阶段的时候值为0）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">100</span></span><br><span class="line"><span class="comment">// 类成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> b=<span class="number">10</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h2><p>这个阶段是将符号引用替换为直接引用<br>符号引用：因为在编译城<code>.class</code>文件时，此时jvm并不知道所应用类的地址，所以用一组符号来代替<br>直接引用：如果有了直接引用，那么被应用的对象一定会被加载到内存中；<br>直接引用可以是<br>直接指向目标的指针（指向对象、类变量和类方法的指针）<br>相对偏移值（指向实例的变量、方法的指针）<br>一个可以间接定位到对象的句柄</p>
<h2 id="初始化阶段-重要"><a href="#初始化阶段-重要" class="headerlink" title="初始化阶段(重要)"></a>初始化阶段(重要)</h2><h3 id="触发的条件"><a href="#触发的条件" class="headerlink" title="触发的条件"></a>触发的条件</h3><ul>
<li>遇到new、getstatic、putstatic、invokestatic这四个字节码指令时，如果类没有进行实例化，则需要进行初始化。<blockquote>
<p>触发场景</p>
</blockquote>
<ul>
<li>使用new对象实例化对象时；</li>
<li>读取或设置一个类的静态字段（被final修饰的除外）</li>
<li>调用一个类的静态方法时</li>
</ul>
</li>
<li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候，如果类没有进行过实例化，则进行初始化</li>
<li>当实例化一个类时。如果发现父类没有进行初始化，则触发父类的初始化</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>当jvm完成初始化后，jvm便从入口方法执行程序</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>当执行完代码后，jvm便开始销毁创建的对象，最后负责执行的jvm退出内存</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda和Stream</title>
    <url>/posts/62812/</url>
    <content><![CDATA[<h1 id="1-lambda"><a href="#1-lambda" class="headerlink" title="1.lambda"></a>1.lambda</h1><p>lambda允许把函数作为方法的入参。精简了代码量</p>
<h2 id="lambda格式"><a href="#lambda格式" class="headerlink" title="lambda格式"></a>lambda格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">无参：()-&#123;doSomething&#125;</span><br><span class="line">单个参数：(param)-&gt;&#123;doSomething&#125; 或 param-&gt;&#123;doSomething&#125;</span><br><span class="line">俩个参数：(param1,param2)-&gt;&#123;doSomething&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lambda示例"><a href="#lambda示例" class="headerlink" title="lambda示例"></a>lambda示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.7之前线程创建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程创建&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.8使用lambda线程创建</span></span><br><span class="line"><span class="comment">// 无参</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;线程创建-lambda&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个参数</span></span><br><span class="line">Function&lt;Integer, String&gt; function = integer -&gt; integer.toString();</span><br><span class="line">Function&lt;Integer, String&gt; function1 = (integer) -&gt; integer.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 俩个参数</span></span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">6</span>);</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;sex&quot;</span>);</span><br><span class="line">map.forEach((key, value) -&gt; System.out.println(<span class="string">&quot;key:&quot;</span> + key + <span class="string">&quot;----value:&quot;</span> + value));</span><br></pre></td></tr></table></figure>

<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>function：函数接口，主要用于不同类型转换；经典的使用场景就是Stream中的map方法。<br>Function&lt;T, R&gt;  泛型T代表的是的要转换的入参；R泛型是要输出的返参</p>
<h3 id="方法及代码示例"><a href="#方法及代码示例" class="headerlink" title="方法及代码示例"></a>方法及代码示例</h3><h4 id="apply（核心方法）"><a href="#apply（核心方法）" class="headerlink" title="apply（核心方法）"></a>apply（核心方法）</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">R <span class="title function_">apply</span><span class="params">(T t)</span>：具体执行逻辑将入参泛型T转化为泛型R</span><br><span class="line">  示例：</span><br><span class="line">  Function&lt;String,Integer&gt; strToInt = Integer::parseInt;</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">apply</span> <span class="operator">=</span> strToInt.apply(<span class="string">&quot;18&quot;</span>);</span><br><span class="line">  System.out.println(apply);</span><br></pre></td></tr></table></figure>

<h4 id="andThen"><a href="#andThen" class="headerlink" title="andThen"></a>andThen</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span>  ：apply方法的扩展，执行顺序-先执行Function本身的apply方法，后执行andThen里面的apply方法</span><br></pre></td></tr></table></figure>

<h4 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span>：apply方法的扩展，执行顺序和andThen相反-先执行compose里面的apply方法，后执行Function本身的apply方法</span><br></pre></td></tr></table></figure>

<h4 id="andThen和compose方法比较"><a href="#andThen和compose方法比较" class="headerlink" title="andThen和compose方法比较"></a>andThen和compose方法比较</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; multiply10 = i -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;apply--i * 10;i=&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Function&lt;Integer, Integer&gt; multiply100 = i -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;apply--i * 100;i=&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;andThen:start--------------------andThen:start&quot;</span>);</span><br><span class="line">System.out.println(multiply10</span><br><span class="line">        .andThen(multiply100)</span><br><span class="line">        .apply(<span class="number">10</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;andThen:end--------------------compose:start&quot;</span>);</span><br><span class="line">System.out.println(multiply10</span><br><span class="line">        .compose(multiply100)</span><br><span class="line">        .apply(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h4 id="identity-返回自身"><a href="#identity-返回自身" class="headerlink" title="identity:返回自身"></a>identity:返回自身</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四1&quot;</span>, <span class="number">20</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四2&quot;</span>, <span class="number">20</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四3&quot;</span>, <span class="number">23</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四4&quot;</span>, <span class="number">24</span>));</span><br><span class="line">HashMap&lt;User, List&lt;User&gt;&gt; collect = list.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Function.identity(), HashMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line">collect.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;identity---&quot;</span> + k + <span class="string">&quot;+&quot;</span> + v));</span><br><span class="line">Map&lt;Integer, List&lt;User&gt;&gt; collect1 = list.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(User::getAge, Collectors.toList()));</span><br><span class="line">collect1.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;------------------&quot;</span> + k + <span class="string">&quot;+&quot;</span> + v));</span><br></pre></td></tr></table></figure>

<h3 id="BiFunction"><a href="#BiFunction" class="headerlink" title="BiFunction"></a>BiFunction</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Function接口的增强版，用法和Function用途一样，只不过入参有俩个变为了三个，其他功能都是类似的</p>
<h3 id="BinaryOperator"><a href="#BinaryOperator" class="headerlink" title="BinaryOperator"></a>BinaryOperator</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>BiFunction的增强版，功能主要和二元运算符相似,主要有俩个方法，maxBy（取俩者最大值）和minBy（取俩者最小值）</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 取最大值</span><br><span class="line">System.out.println(BinaryOperator.maxBy(Integer::compareTo).apply(1, 2));</span><br><span class="line">// 取最小值</span><br><span class="line">System.out.println(BinaryOperator.minBy(Integer::compareTo).apply(1, 2));</span><br></pre></td></tr></table></figure>

<h3 id="DoubleBinaryOperator"><a href="#DoubleBinaryOperator" class="headerlink" title="DoubleBinaryOperator"></a>DoubleBinaryOperator</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>BinaryOperator增强版，只对double类型的数据进行操作,参数个数为俩个</p>
<h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相加</span></span><br><span class="line"><span class="type">DoubleBinaryOperator</span> <span class="variable">doubleBinaryOperator</span> <span class="operator">=</span> Double::sum;</span><br><span class="line">System.out.println(doubleBinaryOperator.applyAsDouble(<span class="number">10D</span>, <span class="number">20D</span>));</span><br><span class="line"><span class="comment">// 	相除</span></span><br><span class="line"><span class="type">DoubleBinaryOperator</span> <span class="variable">doubleBinaryOperator1</span> <span class="operator">=</span> (left, right) -&gt; left / right;</span><br><span class="line">System.out.println(doubleBinaryOperator1.applyAsDouble(<span class="number">100D</span>, <span class="number">20D</span>));</span><br></pre></td></tr></table></figure>



<h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>断言，主要用作判断。经典的使用场景是stream.filter方法，核心方法为test方法</p>
<h3 id="方法及代码示例-1"><a href="#方法及代码示例-1" class="headerlink" title="方法及代码示例"></a>方法及代码示例</h3><h4 id="test-核心方法"><a href="#test-核心方法" class="headerlink" title="test(核心方法)"></a>test(核心方法)</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 源码</span><br><span class="line">boolean test(T t);</span><br><span class="line">// 示例</span><br><span class="line">Predicate&lt;String&gt; predicateString = &quot;test&quot;::equals;</span><br><span class="line">System.out.println(predicateString.test(&quot;test&quot;));</span><br></pre></td></tr></table></figure>

<h4 id="and"><a href="#and" class="headerlink" title="and"></a>and</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">and</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//含义：</span></span><br><span class="line"><span class="comment">//且关系，当predicate的条件和and的条件都满足是返回true</span></span><br><span class="line">示例：</span><br><span class="line"><span class="comment">// and 俩个条件相等才会返回true</span></span><br><span class="line">System.out.println(<span class="string">&quot;and且false---&gt;&quot;</span> + predicateString.and(t -&gt; t.contains(<span class="string">&quot;t&quot;</span>)).test(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;and且false---&gt;&quot;</span> + predicateString.and(t -&gt; t.contains(<span class="string">&quot;t&quot;</span>)).test(<span class="string">&quot;te&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">negate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 含义 </span></span><br><span class="line"><span class="comment">// 否定，对原来的predicated条件取反</span></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"> Predicate&lt;String&gt; negate = predicateString.negate();</span><br><span class="line">        System.out.println(<span class="string">&quot;negate否true---&gt;&quot;</span> + negate.test(<span class="string">&quot;tst&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;negate否false---&gt;&quot;</span> + negate.test(<span class="string">&quot;test&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="or"><a href="#or" class="headerlink" title="or"></a>or</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">or</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 含义</span></span><br><span class="line"><span class="comment">// 或者，当俩个条件有一个成立是就返回true</span></span><br><span class="line">Predicate&lt;Integer&gt; predicateInteger1 = i -&gt; i == <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;or或者true---&gt;&quot;</span> + predicateInteger.or(predicateInteger1).test(<span class="number">5</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;or或者true---&gt;&quot;</span> + predicateInteger.or(predicateInteger1).test(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h4 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="title function_">isEqual</span><span class="params">(Object targetRef)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">null</span> == targetRef)</span><br><span class="line">            ? Objects::isNull</span><br><span class="line">            : object -&gt; targetRef.equals(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//含义</span></span><br><span class="line"><span class="comment">//包含，用法和Object.equals相同，只不过内部做了非空判断</span></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">Predicate&lt;String&gt; predicateEqual = Predicate.isEqual(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;isEqual包含true---&gt;&quot;</span> + predicateEqual.test(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;isEqual包含false---&gt;&quot;</span> + predicateEqual.test(<span class="string">&quot;nme&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;isEqual包含(&#x27;&#x27;)false---&gt;&quot;</span> + predicateEqual.test(<span class="string">&quot;&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;isEqual包含(null)false---&gt;&quot;</span> + predicateEqual.test(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure>



<h3 id="BiPredicate"><a href="#BiPredicate" class="headerlink" title="BiPredicate"></a>BiPredicate</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>Predicate的增强版，入参的Predicate的一个变为了俩个，具体的功能都是类似的</p>
<h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>方法主要返回指定泛型的对象，无参</p>
<h3 id="方法及代码示例-2"><a href="#方法及代码示例-2" class="headerlink" title="方法及代码示例"></a>方法及代码示例</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//源码：</span><br><span class="line">T get();</span><br><span class="line">// 含义</span><br><span class="line">给定类型，接口实现的返参格式必须和Supplier的泛型一致</span><br><span class="line">//示例</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(new User(&quot;李四&quot;, 18));</span><br><span class="line">//对象处理</span><br><span class="line">Supplier&lt;User&gt; supplier = User::new;</span><br><span class="line">Supplier&lt;User&gt; supplierAll = () -&gt; list.get(0);</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line">System.out.println(supplierAll.get());</span><br></pre></td></tr></table></figure>

<h3 id="BooleanSupplier"><a href="#BooleanSupplier" class="headerlink" title="BooleanSupplier"></a>BooleanSupplier</h3><h4 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h4><p>Supplier的增加版，核心方法无参数返回类型为boolean类型的getAsBoolean方法，主要用作判断</p>
<h4 id="方法及代码示例-3"><a href="#方法及代码示例-3" class="headerlink" title="方法及代码示例"></a>方法及代码示例</h4><h5 id="getAsBoolean"><a href="#getAsBoolean" class="headerlink" title="getAsBoolean"></a>getAsBoolean</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// Supplier 增强版 ，判断条件是否相等，可以理解为if的判断条件</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">BooleanSupplier</span> <span class="variable">booleanSupplier</span> <span class="operator">=</span> () -&gt; age == age1;</span><br><span class="line">    System.out.println(booleanSupplier.getAsBoolean());</span><br><span class="line">    System.out.println(isSuccess(<span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;王五&quot;</span>));</span><br><span class="line">    System.out.println(isSuccess(<span class="string">&quot;赵四1&quot;</span>, <span class="string">&quot;赵四1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> String string)</span> &#123;</span><br><span class="line">    <span class="type">BooleanSupplier</span> <span class="variable">booleanSupplier</span> <span class="operator">=</span> () -&gt; name.equals(string);</span><br><span class="line">    <span class="keyword">return</span> booleanSupplier.getAsBoolean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>Consumer 消费者，无返回类型</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p>accept</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line"><span class="comment">// 含义</span></span><br><span class="line"><span class="comment">// 对入参进行操作，输出，修改值</span></span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">19</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;赵大&quot;</span>, <span class="number">20</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;钱二&quot;</span>, <span class="number">30</span>));</span><br><span class="line">Consumer&lt;List&lt;User&gt;&gt; consumer = System.out::println;</span><br><span class="line">consumer.accept(list);</span><br><span class="line"><span class="comment">// 未加强</span></span><br><span class="line">Consumer&lt;List&lt;User&gt;&gt; consumerSet = t -&gt; t.forEach(t1 -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (t1.getName().equals(<span class="string">&quot;李四&quot;</span>)) &#123;</span><br><span class="line">        t1.setName(<span class="string">&quot;李四未加强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">consumerSet.accept(list);</span><br><span class="line">System.out.println(<span class="string">&quot;1---------------------------&gt;&quot;</span>);</span><br><span class="line">consumer.accept(list);</span><br><span class="line"><span class="comment">// 加强</span></span><br><span class="line">Predicate&lt;User&gt; userPredicate = t -&gt; t.getName().equals(<span class="string">&quot;李四未加强&quot;</span>);</span><br><span class="line">Consumer&lt;User&gt; changeAge = t1 -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (userPredicate.test(t1))</span><br><span class="line">        t1.setName(<span class="string">&quot;李四加强&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Consumer&lt;List&lt;User&gt;&gt; consumerSet1 = t -&gt; t.forEach(changeAge);</span><br><span class="line">consumerSet1.accept(list);</span><br><span class="line">System.out.println(<span class="string">&quot;2---------------------------&gt;&quot;</span>);</span><br><span class="line">consumer.accept(list);</span><br></pre></td></tr></table></figure>
</li>
<li><p>andThen</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 含义</span></span><br><span class="line"><span class="comment">// 执行Consumer.accep后在执行andThen的accept方法</span></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">Predicate&lt;User&gt; userPredicate = t -&gt; t.getName().equals(<span class="string">&quot;李四未加强&quot;</span>);</span><br><span class="line">Consumer&lt;User&gt; changeAge = t1 -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (userPredicate.test(t1)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userPredicate李四加强---&gt;&quot;</span>);</span><br><span class="line">        t1.setName(<span class="string">&quot;李四加强&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userPredicate李四加强No---&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Consumer&lt;List&lt;User&gt;&gt; consumerSet1 = t -&gt; t.forEach(changeAge);</span><br><span class="line">consumerSet1.accept(list);</span><br><span class="line">System.out.println(<span class="string">&quot;2---------------------------&gt;&quot;</span>);</span><br><span class="line">consumer.accept(list);</span><br><span class="line"><span class="comment">// andThen</span></span><br><span class="line">System.out.println(<span class="string">&quot;andThen---------------------------&gt;&quot;</span>);</span><br><span class="line">Consumer&lt;List&lt;User&gt;&gt; consumerSetNew = t -&gt; t.forEach(t1 -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (t1.getName().equals(<span class="string">&quot;李四加强&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;consumerSetNew---------------&quot;</span>);</span><br><span class="line">        t1.setName(<span class="string">&quot;李四andThen&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">consumerSet1.andThen(System.out::println).andThen(consumerSetNew).accept(list);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="DoubleConsumer"><a href="#DoubleConsumer" class="headerlink" title="DoubleConsumer"></a>DoubleConsumer</h3><h4 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h4><p>DoubleConsumer为consumer增强版，参数为double无返回类型</p>
<h4 id="方法及代码示例-4"><a href="#方法及代码示例-4" class="headerlink" title="方法及代码示例"></a>方法及代码示例</h4><h5 id="accept核心方法"><a href="#accept核心方法" class="headerlink" title="accept核心方法"></a>accept核心方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">DoubleConsumer</span> <span class="variable">doubleConsumer</span> <span class="operator">=</span> (param) -&gt; list.add(String.valueOf(param * <span class="number">10D</span>));</span><br><span class="line">doubleConsumer.accept(<span class="number">10D</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;accept----&gt;&quot;</span> + list);</span><br></pre></td></tr></table></figure>

<h5 id="andThen-1"><a href="#andThen-1" class="headerlink" title="andThen"></a>andThen</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先执行accept方法在执行andThen方法</span></span><br><span class="line">doubleConsumer.andThen((t) -&gt; list.add(String.valueOf(t + <span class="number">10</span>)))</span><br><span class="line">        .accept(<span class="number">10D</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;andThen----&gt;&quot;</span> + list);</span><br></pre></td></tr></table></figure>



<h3 id="BiConsumer"><a href="#BiConsumer" class="headerlink" title="BiConsumer"></a>BiConsumer</h3><h4 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h4><p>Consumer的增强版，入参由Consumer的一个变为了俩个，</p>
<h4 id="方法及代码示例-5"><a href="#方法及代码示例-5" class="headerlink" title="方法及代码示例"></a>方法及代码示例</h4><h5 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h5><p>最经典的用例就是Map.foreach方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//代码示例</span></span><br><span class="line">BiConsumer&lt;Integer, Integer&gt; integerBiConsumer = (v1, v2) -&gt; System.out.println(v1 + v2);</span><br><span class="line">integerBiConsumer.accept(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">map.put(<span class="number">10</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">map.put(<span class="number">11</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">map.put(<span class="number">13</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;---&quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="andThen-2"><a href="#andThen-2" class="headerlink" title="andThen"></a>andThen</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先执行accept方法在执行andThen方法</span></span><br><span class="line">integerBiConsumer.andThen((v1, v2) -&gt; System.out.println(v1 * v2)).accept(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList数组</title>
    <url>/posts/56054/</url>
    <content><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>底层数据接口是根据动态数组存储数据，根据<code>System.arraycopy()</code>方法去动态扩容。</p>
<h2 id="ArrayList和LinkedList对比"><a href="#ArrayList和LinkedList对比" class="headerlink" title="ArrayList和LinkedList对比"></a>ArrayList和LinkedList对比</h2><blockquote>
<p>因为底层数据结构是数组，所以获取元素的很快，但新增元素或删除元素时，如果涉及到数组拷贝则效率会很慢，所以在使用时最好指定数组的长度，防止频繁的进行数组的拷贝，如果频繁的进行删除和新增则可以使用<code>LindekList</code>进行存储数据，因为<code>LinkedList</code>底层是双向链表，只需要改变上一个元素或下一元素的指向则可进行删除和新增，效率会比<code>ArrayList</code>更高</p>
<p>因为底层数据结构的不同，占用的空间会小于<code>LinkedList</code> 但<code>ArrayList</code>每次扩容大小都是当前数组长度的1.5倍，所以会浪费内存空间</p>
<p>所以如果你对内存占用敏感并且频繁访问元素，<code>ArrayList</code> 可能是更好的选择。如果你频繁插入和删除元素，尤其是在中间位置，<code>LinkedList</code> 会更适合</p>
</blockquote>
<h2 id="核心字段"><a href="#核心字段" class="headerlink" title="核心字段"></a>核心字段</h2><table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td>DEFAULT_CAPACITY</td>
<td>默认大小</td>
<td>private static final int DEFAULT_CAPACITY &#x3D; 10</td>
</tr>
<tr>
<td>elementData</td>
<td>数据存储</td>
<td>transient Object[] elementData</td>
</tr>
<tr>
<td>size</td>
<td>数组大小</td>
<td>private int size</td>
</tr>
<tr>
<td>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</td>
<td>用于默认大小的空实例的共享空数组实例</td>
<td>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA &#x3D; {};</td>
</tr>
</tbody></table>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul>
<li><p>无参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>指定数组长度的构造方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment">  *         is negative</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123; <span class="comment">//如果传入的值为负值则抛出非法参数异常</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity]; <span class="comment">// 指定数组长度</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>根据传入的集合去构造方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123; <span class="comment">// 判断是否是空数组</span></span><br><span class="line">        <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">            elementData = a; <span class="comment">// 如果类型是ArryList则直接指向</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            elementData = Arrays.copyOf(a, size, Object[].class); <span class="comment">// 如果不是则进行拷贝</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array. 如果是空数组则默认为&#123;&#125;</span></span><br><span class="line">        elementData = EMPTY_ELEMENTDATA; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><ul>
<li><p>在行尾添加元素</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    add(e, elementData, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定下标添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the specified element at the specified position in this</span></span><br><span class="line"><span class="comment"> * list. Shifts the element currently at that position (if any) and</span></span><br><span class="line"><span class="comment"> * any subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index); <span class="comment">// 判断添加的下标是否大于数组长度，如果大于则抛出IndexOutOfBoundsException数组下标越界的异常</span></span><br><span class="line">    modCount++; <span class="comment">// 操作次数+1</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> s;</span><br><span class="line">    Object[] elementData;</span><br><span class="line">    <span class="keyword">if</span> ((s = size) == (elementData = <span class="built_in">this</span>.elementData).length)</span><br><span class="line">        elementData = grow(); <span class="comment">// 扩容大小：1</span></span><br><span class="line">    System.arraycopy(elementData, index,</span><br><span class="line">                     elementData, index + <span class="number">1</span>,</span><br><span class="line">                     s - index); <span class="comment">//指定下标后的元素下标往后移动一位</span></span><br><span class="line">    elementData[index] = element; <span class="comment">// 在指定下标添加元素</span></span><br><span class="line">    size = s + <span class="number">1</span>; <span class="comment">// 数组大小+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>添加集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends all of the elements in the specified collection to the end of</span></span><br><span class="line"><span class="comment"> * this list, in the order that they are returned by the</span></span><br><span class="line"><span class="comment"> * specified collection&#x27;s Iterator.  The behavior of this operation is</span></span><br><span class="line"><span class="comment"> * undefined if the specified collection is modified while the operation</span></span><br><span class="line"><span class="comment"> * is in progress.  (This implies that the behavior of this call is</span></span><br><span class="line"><span class="comment"> * undefined if the specified collection is this list, and this</span></span><br><span class="line"><span class="comment"> * list is nonempty.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    modCount++; <span class="comment">// 操作次数+1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length; <span class="comment">// 获取传入的数组长度</span></span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 如果为空返回false</span></span><br><span class="line">    Object[] elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> (numNew &gt; (elementData = <span class="built_in">this</span>.elementData).length - (s = size))</span><br><span class="line">        elementData = grow(s + numNew); <span class="comment">// 如果传入的数组大小大于当前数组的长度（总长度-实际长度）则数组扩容</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, s, numNew); <span class="comment">// 将传入的数组拷贝到队尾中</span></span><br><span class="line">    size = s + numNew; <span class="comment">// 当前数组大小加上传入数组的大小</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>在指定下标添加集合元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment"> * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment"> * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment"> * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment"> * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment"> * specified collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index at which to insert the first element from the</span></span><br><span class="line"><span class="comment"> *              specified collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index); <span class="comment">// 判断添加的下标是否大于数组长度，如果大于则抛出IndexOutOfBoundsException数组下标越界的异常</span></span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    modCount++; <span class="comment">// 操作次数+1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Object[] elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> (numNew &gt; (elementData = <span class="built_in">this</span>.elementData).length - (s = size))</span><br><span class="line">        elementData = grow(s + numNew); <span class="comment">// 如果传入的数组大小大于当前数组的长度（总长度-实际长度）则数组扩容.扩容的大小=（当前数组长度+传入的数组长度）*1.5</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> s - index; <span class="comment">// 需要移动下标的大小</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index,</span><br><span class="line">                         elementData, index + numNew,</span><br><span class="line">                         numMoved); <span class="comment">// 将传入的下标后的元素后移numMoved大小</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew); <span class="comment">// 数组拷贝</span></span><br><span class="line">    size = s + numNew;   <span class="comment">// 当前数组长度+传入的数组长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><ul>
<li><p>根据元素删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment">  * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment">  * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@code</span> i&#125; such that</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@code</span> Objects.equals(o, get(i))&#125;</span></span><br><span class="line"><span class="comment">  * (if such an element exists).  Returns &#123;<span class="doctag">@code</span> true&#125; if this list</span></span><br><span class="line"><span class="comment">  * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment">  * changed as a result of the call).</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list contained the specified element</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> Object[] es = elementData;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     found: &#123; <span class="comment">// 获取元素的下标</span></span><br><span class="line">         <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">for</span> (; i &lt; size; i++)</span><br><span class="line">                 <span class="keyword">if</span> (es[i] == <span class="literal">null</span>)</span><br><span class="line">                     <span class="keyword">break</span> found;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">for</span> (; i &lt; size; i++)</span><br><span class="line">                 <span class="keyword">if</span> (o.equals(es[i]))</span><br><span class="line">                     <span class="keyword">break</span> found;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     fastRemove(es, i); <span class="comment">// 根据下标删除数据（只删除第一个找到的元素，如果有多个相同元素，则不会全部删除）</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment">  * return the value removed.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(Object[] es, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">     modCount++; <span class="comment">// 操作次数+1</span></span><br><span class="line">     <span class="keyword">final</span> <span class="type">int</span> newSize;</span><br><span class="line">     <span class="keyword">if</span> ((newSize = size - <span class="number">1</span>) &gt; i) <span class="comment">// 如果不是队尾元素则将将指定下标处的元素网球移动一位</span></span><br><span class="line">         System.arraycopy(es, i + <span class="number">1</span>, es, i, newSize - i);</span><br><span class="line">     es[size = newSize] = <span class="literal">null</span>; <span class="comment">// 删除元素后，将数组末尾的元素置为 null</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>根据下标删除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element at the specified position in this list.</span></span><br><span class="line"><span class="comment"> * Shifts any subsequent elements to the left (subtracts one from their</span></span><br><span class="line"><span class="comment"> * indices).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the element that was removed from the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    Objects.checkIndex(index, size);  <span class="comment">// 判断是否下标越界，如果越界则抛出数组下标越界的异常 IndexOutOfBoundsException</span></span><br><span class="line">    <span class="keyword">final</span> Object[] es = elementData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> (E) es[index]; <span class="comment">// 根据删除坐标获取删除元素的内容</span></span><br><span class="line">    fastRemove(es, index); <span class="comment">// 调用的方法和根据元素删除的调用的方法一致</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue; <span class="comment">// 返回删除元素的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据下标范围批量删除元素 （待补充）</p>
</li>
<li><p>根据传入的集合元素批量删除 （待补充）</p>
</li>
</ul>
<h2 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h2><h3 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy()"></a>System.arraycopy()</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>arraycopy是java.lang.system类下方法</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos,</span><br><span class="line">int length);</span><br></pre></td></tr></table></figure>

<h4 id="参数简介"><a href="#参数简介" class="headerlink" title="参数简介"></a>参数简介</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th>数据结构</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">length</td>
<td>int</td>
<td>要复制的数组元素的数量，一般为src.length-srcPos</td>
</tr>
<tr>
<td align="left">src</td>
<td>Object</td>
<td>源数组</td>
</tr>
<tr>
<td align="left">srcPos</td>
<td>int</td>
<td>从源数组的该下标之后开始拷贝</td>
</tr>
<tr>
<td align="left">dest</td>
<td>int</td>
<td>目标数组</td>
</tr>
<tr>
<td align="left">destPos</td>
<td>Object</td>
<td>从目标数组的该下标之后替换为源数据的数据</td>
</tr>
</tbody></table>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Object[] obj = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    Object[] obj1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">54</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">srcPos</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    System.arraycopy(obj, srcPos, obj1, <span class="number">5</span>, obj.length - srcPos);</span><br><span class="line">    System.out.println(Arrays.toString(obj1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="type">int</span> minCapacity) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length; <span class="comment">// 获取当前数组的长度</span></span><br><span class="line">    <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth 根据当前数组的长度扩容1.5倍*/</span>);</span><br><span class="line">        <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>[Math.max(DEFAULT_CAPACITY, minCapacity)];<span class="comment">// 设置默认大小为10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><img src="/posts/56054/ArrayList-add%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="ArrayList-add流程图">



<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring mvc的执行流程</title>
    <url>/posts/38002/</url>
    <content><![CDATA[<h1 id="Spring-mvc的执行流程"><a href="#Spring-mvc的执行流程" class="headerlink" title="Spring mvc的执行流程"></a>Spring mvc的执行流程</h1><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. 请求到达 DispatcherServlet</span><br><span class="line">2. DispatcherServlet 根据 URL 查找 HandlerMapping</span><br><span class="line">3. HandlerMapping 找到合适的 Controller</span><br><span class="line">4. 调用 Controller 中的方法处理请求</span><br><span class="line">5. Controller 返回 ModelAndView</span><br><span class="line">6. DispatcherServlet 调用 ViewResolver 解析视图</span><br><span class="line">7. 渲染视图并返回给客户端</span><br><span class="line">8. 请求结束</span><br></pre></td></tr></table></figure>

<h2 id="DispatcherServlet-源码解析"><a href="#DispatcherServlet-源码解析" class="headerlink" title="DispatcherServlet 源码解析"></a>DispatcherServlet 源码解析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// wwb异步处理管理器</span></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 检测是不是文件流</span></span><br><span class="line">                processedRequest = <span class="built_in">this</span>.checkMultipart(request);</span><br><span class="line">                multipartRequestParsed = processedRequest != request;</span><br><span class="line">                <span class="comment">// 根据请求的url获取HandleMapping</span></span><br><span class="line">                mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果根据url找不到对应的HandleMapping则返回404错误</span></span><br><span class="line">                    <span class="built_in">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取HandleMapping适配器</span></span><br><span class="line">                <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> HttpMethod.GET.matches(method);</span><br><span class="line">                <span class="keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// HandlerInterceptor#preHandle 拦截器方法执行，如果返回false 则直接返回，不进行后续处理，主要用来前置处理，比如可以实现HandlerInterceptor方法，进行鉴权操作  执行顺序：正序</span></span><br><span class="line">                <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 执行Controller的方法,并返回ModelAndView</span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                <span class="comment">// 执行HandlerInterceptor#postHandle方法  一般对response进行梳理 执行顺序：倒叙</span></span><br><span class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                <span class="type">Exception</span> <span class="variable">ex</span> <span class="operator">=</span> var20;</span><br><span class="line">                dispatchException = ex;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">err</span> <span class="operator">=</span> var21;</span><br><span class="line">                dispatchException = <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;Handler dispatch failed: &quot;</span> + err, err);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ViewResolver解析ModelAndView</span></span><br><span class="line">            <span class="built_in">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">ex</span> <span class="operator">=</span> var22;</span><br><span class="line">            <span class="comment">// 执行HandlerInterceptor#afterCompletion方法  执行顺序：倒叙</span></span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">err</span> <span class="operator">=</span> var23;</span><br><span class="line">            <span class="comment">// 执行HandlerInterceptor#afterCompletion方法 执行顺序：倒叙</span></span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;Handler processing failed: &quot;</span> + err, err));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 执行HandlerInterceptor#afterCompletion方法 执行顺序：倒叙</span></span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">            <span class="comment">// 如果是文件流则删除文件流</span></span><br><span class="line">            <span class="built_in">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring mvc</tag>
      </tags>
  </entry>
</search>
